{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pricer_FINAL_v10.0","provenance":[{"file_id":"1cImw6GuMlUYoXtHtEnyuP7lXsAlko2r6","timestamp":1586673630773},{"file_id":"12hj33ZWQvkYdXCMyK_Nchokt8XWMWbEv","timestamp":1586665467758},{"file_id":"1g9xDGWCoKgFhNQWMW_nGfeJ8C1_5zaOE","timestamp":1586418388157},{"file_id":"1x8Yse6fcFTczP_PyKFdUmXdcuQAR_4_q","timestamp":1586191214807}],"collapsed_sections":["d5l3s8YATLLE","opyL41TtvItF","rA02G58pTXXy","aFneK_QsvZnF","7w1N-UPPGLzu"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"zY4InIR-t8Bp","colab_type":"text"},"source":["\n","# Asian Options Pricing & Hedging Tool"]},{"cell_type":"markdown","metadata":{"id":"frIs7Laf6OxE","colab_type":"text"},"source":["Course: FE 620: Pricing & Hedging | Stevens Institute of Technology\n","\n","Advisor: Dan Pirjol\n","\n","Group: Theo Dimitrasopoulos, Will Kraemer, Vaikunth Seshadri, Snehal Rajguru\n","\n","Link: https://colab.research.google.com/drive/1Slsz4ExX6pUXAEqxK4veRJKeKFsD3n18\n","\n","*Version: v10.0*"]},{"cell_type":"markdown","metadata":{"id":"nqNjBKHR8PDW","colab_type":"text"},"source":["## **Runtime comments:**\n","\n","* Click the execution button on the top left corner of each code cell to execute it. To run all cells in descending order, go to the menu bar at the top and click Runtime -> Run all (or use the **Ctrl-F9** or **âŒ˜-F9** hotkey for Windows and MacOSX respectively);\n","* If the code is running slowly, go to Runtime -> Change runtime type, and change the Runtime Shape to High-RAM from the dropdown menu;\n","* The **\"!pip install\"** lines under the Python packages section (i.e. lines 3-5) only need to be executed the first time you run the notebook. If you receive the message **\"Requirement already satisfied:\"**, wrap them in treble quotes (add the quotes in lines 2 & 6)*."]},{"cell_type":"markdown","metadata":{"id":"d5l3s8YATLLE","colab_type":"text"},"source":["## Python Packages"]},{"cell_type":"code","metadata":{"id":"VRbkpjmc_DFg","colab_type":"code","colab":{}},"source":["# Import Packages\n","import random\n","import numpy as np\n","from scipy.stats import norm\n","import matplotlib.pyplot as plt\n","import tensorflow.compat.v1 as tf\n","tf.disable_v2_behavior()\n","from matplotlib import cm"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"opyL41TtvItF","colab_type":"text"},"source":["## Inputs"]},{"cell_type":"markdown","metadata":{"id":"4WUxukopTRY7","colab_type":"text"},"source":["### Underlying Asset Variables\n","Insert the desired values in the form fields (right) or directly to the code (left):"]},{"cell_type":"code","metadata":{"id":"TnEggRnPnML3","colab_type":"code","cellView":"both","colab":{}},"source":["#@title Pricer Parameters:\n","\n","# Initial Underlying Price\n","S0 = 100#@param {type:\"number\"}\n","\n","# Risk-free rate (also known as the drift coefficient)\n","r = 0.15#@param {type:\"number\"}\n","\n","# Dividend Yield Rate\n","q = 0.0#@param {type:\"number\"}\n","\n","# Maturity\n","T = 1.0#@param {type:\"number\"}\n","\n","# Strike\n","K = 95#@param {type:\"number\"}\n","\n","# Volatility (also known as the diffusion coefficient)\n","sigma = 0.3#@param {type:\"number\"}\n","\n","# Number of Iterations for Monte Carlo Simulation\n","it = 10000#@param {type:\"integer\"}\n","\n","# Time Steps\n","N = 100000#@param {type:\"integer\"}\n","\n","# Valuation Date\n","t = 0.0#@param {type:\"number\"}\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rA02G58pTXXy","colab_type":"text"},"source":["## Plotting Parameters"]},{"cell_type":"markdown","metadata":{"id":"_CqW_QnbsFn_","colab_type":"text"},"source":["### Aesthetic Parameters"]},{"cell_type":"code","metadata":{"id":"gaVvMo9XadEl","colab_type":"code","colab":{}},"source":["#@title Element Sizes:\n","\n","# Universal Plot width\n","width = 25 #@param {type:\"integer\"}\n","\n","# Universal Plot height\n","height =  14#@param {type:\"integer\"}\n","\n","# Universal xtick size\n","xtick_size = 8 #@param {type:\"integer\"}\n","\n","# Universal ytick size\n","ytick_size =  8#@param {type:\"integer\"}\n","\n","# Universal title font size\n","title_size = 18 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","xlabel_size = 12 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","ylabel_size = 12 #@param {type:\"integer\"}\n","\n","# Universal legend font size\n","legend_size = 10 #@param {type:\"integer\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f8xVZjiTsJrg","colab_type":"text"},"source":["### Execute Parameters"]},{"cell_type":"code","metadata":{"id":"Zk2eSNqcjRf6","colab_type":"code","colab":{}},"source":["#Set parameters\n","plt.rcParams['figure.figsize'] = (width,height)\n","params = {'text.color' : 'black',\n","          'xtick.color' : 'black',\n","          'ytick.color' : 'black',\n","          'xtick.labelsize' : xtick_size,\n","          'ytick.labelsize' : ytick_size,\n","          'legend.loc' : 'upper left',\n","         }\n","plt.rcParams.update(params)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aFneK_QsvZnF","colab_type":"text"},"source":["## Definitions"]},{"cell_type":"markdown","metadata":{"id":"TT4Ldy_Zs0wZ","colab_type":"text"},"source":["### Brownian Path Generator"]},{"cell_type":"code","metadata":{"id":"KmMR6l_CszW4","colab_type":"code","colab":{}},"source":["def bm_paths(N):\n","  seed = random.random()\n","  dt = T / N\n","  b_dt = np.random.normal(0., 1., N)*np.sqrt(dt)\n","  W = np.cumsum(b_dt)\n","  return W"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rbDVOtPwGLCd","colab_type":"text"},"source":["### Geometric Brownian Path Generator"]},{"cell_type":"markdown","metadata":{"id":"OKzP_3peQcln","colab_type":"text"},"source":["#### Conventional Implementation:"]},{"cell_type":"code","metadata":{"id":"NR2JccwqGNCM","colab_type":"code","colab":{}},"source":["# NORMAL IMPLEMENTATION:\n","def gbm_paths(r,q,N,T,S0,sigma):\n","  t = np.linspace(0, T, N)\n","  b_t = np.random.normal(0., 1., int(N))*np.sqrt(T/N)\n","  W = np.cumsum(b_t)\n","  S = S0 * np.exp(sigma * W + (r - q - 0.5 * (sigma**2)) * t)\n","  S = np.insert(S, 0, S0)\n","  return S"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1p6oWOZqQe3M","colab_type":"text"},"source":["#### Tensorflow Implementation:"]},{"cell_type":"code","metadata":{"id":"2rHEGL8cHnaf","colab_type":"code","colab":{}},"source":["def tf_graph_gbm_paths():\n","  S0 = tf.placeholder(tf.float32)\n","  K = tf.placeholder(tf.float32)\n","  dt = tf.placeholder(tf.float32)\n","  T = tf.placeholder(tf.float32)\n","  sigma = tf.placeholder(tf.float32)\n","  r = tf.placeholder(tf.float32)\n","  dw = tf.placeholder(tf.float32)\n","  S_i = S0 * tf.cumprod(tf.exp((r-sigma**2/2)*dt+sigma*tf.sqrt(dt)*dw), axis=1)\n","  return (S0, K, dt, T, sigma, r, dw, S_i)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yjSR-0xRhFiQ","colab_type":"code","colab":{}},"source":["def tf_gbm_paths():\n","  (S0,K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","  def paths(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","    if seed != 0:\n","      np.random.seed(seed)\n","    stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","    with tf.Session() as sess:\n","      delta_t = maturity / timesteps\n","      res = sess.run(S_i, \n","                     {\n","                         S0: S_zero,\n","                         K : strk,\n","                         r : riskfrate,\n","                         sigma: volatility,\n","                         dt : delta_t,\n","                         T: maturity,\n","                         dw : stdnorm_random_variates})\n","      return res\n","  return paths"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"1qwa1s1w3yAH","colab":{}},"source":["seed = np.random.randint(1,500)\n","data_generator = tf_gbm_paths()\n","S = data_generator(S0,K,T,sigma,r,seed,10000,10000)\n","plt.plot(np.transpose(S))\n","plt.title('Geometric Brownian Generator (10,000 paths')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wvFPR21kOW3U","colab_type":"code","colab":{}},"source":["for i in range(1,10000):\n","  plt.plot(gbm_paths(r,q,N,T,S0,sigma))\n","\n","plt.title('Geometric Brownian Generator (10,000 paths')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6y3QPkQmM9pC","colab_type":"text"},"source":["### Black-Scholes Theoretical Price\n","Call and Put Asian option prices with geometric averaging. The alternative implementation in Tensorlfow offers efficiency and includes the calculations of 1st 2nd and 3rd order Greeks."]},{"cell_type":"markdown","metadata":{"id":"AijNZZ9kOq1V","colab_type":"text"},"source":["#### Conventional Implementation"]},{"cell_type":"code","metadata":{"id":"R00bkbuCNOWw","colab_type":"code","colab":{}},"source":["# Call Options:\n","def bsm_call(r,q,T,K,S0,sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * T)\n","  d2 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * T)\n","  c = np.exp(-r * T) * (G0 * norm.cdf(d1) - K * norm.cdf(d2))\n","  return c\n","\n","# Put Options:\n","def bsm_put(r,q,T,K,S0,sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * T)\n","  d2 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * T)\n","  p = np.exp(-r * T) * (K * norm.cdf(-d2) - G0 * norm.cdf(-d1))\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wsUvBln-O7dg","colab_type":"text"},"source":["#### Tensorflow Implementation"]},{"cell_type":"code","metadata":{"id":"eVzV3kWCpqDj","colab_type":"code","colab":{}},"source":["# Call Options:\n","def bsm_call_tf(enable_greeks = False):\n","    S0 = tf.placeholder(tf.float32)\n","    K = tf.placeholder(tf.float32)\n","    dt = tf.placeholder(tf.float32)\n","    sigma = tf.placeholder(tf.float32)\n","    r = tf.placeholder(tf.float32)\n","    q = tf.placeholder(tf.float32)    \n","    G0 = S0 * tf.exp(0.5 * (r * dt) - ((tf.math.square(sigma)) * dt)/12)\n","    Sigma_G = sigma/tf.sqrt(3.0)\n","    Phi = tf.distributions.Normal(0.,1.).cdf\n","    d_1 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) + 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    d_2 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) - 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    npv =  tf.exp(-r * dt) * (G0 * Phi(d_1) - K * Phi(d_2))                # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","         \n","    def execute_graph(S_zero, strk, maturity, volatility, riskfrate):\n","        with tf.Session() as sess:\n","            res = sess.run(target_calc, \n","                           {\n","                               S0: S_zero,\n","                               K : strk,\n","                               r : riskfrate,\n","                               sigma: volatility,\n","                               dt: maturity})\n","        return res\n","    return execute_graph\n","\n","# Put Options:\n","def bsm_put_tf(enable_greeks = False):\n","    S0 = tf.placeholder(tf.float32)\n","    K = tf.placeholder(tf.float32)\n","    dt = tf.placeholder(tf.float32)\n","    sigma = tf.placeholder(tf.float32)\n","    r = tf.placeholder(tf.float32)\n","    q = tf.placeholder(tf.float32)    \n","    G0 = S0 * tf.exp(0.5 * (r * dt) - ((tf.math.square(sigma)) * dt)/12)\n","    Sigma_G = sigma/tf.sqrt(3.0)\n","    Phi = tf.distributions.Normal(0.,1.).cdf\n","    d_1 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) + 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    d_2 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) - 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    npv =  tf.exp(-r * dt) * (K * Phi(-d_2) - G0 * Phi(-d_1))              # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","     \n","    def execute_graph(S_zero, strk, maturity, volatility, riskfrate):\n","        with tf.Session() as sess:\n","            res = sess.run(target_calc, \n","                           {\n","                               S0: S_zero,\n","                               K : strk,\n","                               r : riskfrate,\n","                               sigma: volatility,\n","                               dt: maturity})\n","        return res\n","    return execute_graph"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"DWicIVv3enkX"},"source":["### Monte Carlo Simulator with Arithmetic Average\n","Call and Put Asian option prices with arithmetic averaging. The alternative implementation in Tensorlfow offers efficiency and includes the calculations of 1st 2nd and 3rd order Greeks."]},{"cell_type":"markdown","metadata":{"id":"YEIcJDQhe_Fx","colab_type":"text"},"source":["#### Conventional Interpretation"]},{"cell_type":"code","metadata":{"id":"bcOoGNSVfBoQ","colab_type":"code","colab":{}},"source":["# Call Options:\n","def mc_call_arithm(it,r,q,T,K,N,S0,sigma):\n","  mc_call_arithm_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_arithm = np.sum(S)/len(S)\n","    mc_call_arithm_payoffs.append(np.exp(-r * T) * max(S_arithm - K, 0))\n","  c = np.mean(mc_call_arithm_payoffs)\n","  return c\n","\n","# Put Options:\n","def mc_put_arithm(it,r,q,T,K,N,S0,sigma):\n","  mc_put_arithm_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_arithm = np.sum(S)/len(S)\n","    mc_put_arithm_payoffs.append(np.exp(-r * T) * max(K - S_arithm, 0))\n","  p = np.mean(mc_put_arithm_payoffs)\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Wweo2-IyeiHp"},"source":["#### Tensorflow Implementation:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"cmRdXzAEehv3","colab":{}},"source":["# Call Options:\n","def mc_call_arithm_tf(enable_greeks=False):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.reduce_sum(S_i, axis=1)/(T/dt)\n","    payout = tf.maximum(A - K, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)\n","    target_calc = [npv]\n","    if enable_greeks:\n","      greeks = tf.gradients(npv, [S0, sigma, dt]) # delta, vega, theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt]) # gamma, vanna, charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt]) # vanna, vomma/volga, veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt]) # speed, zomma, color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt]) # N/A, ultima, totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer\n","\n","\n","# Put Options:\n","def mc_put_arithm_tf(enable_greeks=False):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.reduce_sum(S_i, axis=1)/(T/dt)\n","    payout = tf.maximum(K - A, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)\n","    target_calc = [npv]\n","    if enable_greeks:\n","      greeks = tf.gradients(npv, [S0, sigma, dt]) # delta, vega, theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt]) # gamma, vanna, charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt]) # vanna, vomma/volga, veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt]) # speed, zomma, color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt]) # N/A, ultima, totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b1Fu5swGul_x","colab_type":"text"},"source":["### Monte Carlo Simulator with Geometric Average"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ZRckDhUieqjR"},"source":["#### Conventional Implementation"]},{"cell_type":"code","metadata":{"id":"OMdz05wy3gLv","colab_type":"code","colab":{}},"source":["# Call Options:\n","def mc_call_geom(it,r,q,T,K,N,S0,sigma):\n","  mc_call_geom_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_geom = np.exp(np.mean(np.log(S)))\n","    mc_call_geom_payoffs.append(np.exp(-r * T) * max(S_geom - K, 0))\n","  c = np.mean(mc_call_geom_payoffs)\n","  return c\n","\n","# Put Options:\n","def mc_put_geom(it,r,q,T,K,N,S0,sigma):\n","  mc_put_geom_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_geom = np.exp(np.mean(np.log(S)))\n","    mc_put_geom_payoffs.append(np.exp(-r * T) * max(K - S_geom, 0))\n","  p = np.mean(mc_put_geom_payoffs)\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIU7eftjcQXq","colab_type":"text"},"source":["#### Tensorflow Implementation"]},{"cell_type":"code","metadata":{"id":"WNRGP7V-cTya","colab_type":"code","colab":{}},"source":["# Call Options:\n","def mc_call_geom_tf(enable_greeks=True):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.pow(tf.reduce_prod(S_i, axis=1), dt / T)\n","    payout = tf.maximum(A - K, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)                          # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer\n","\n","# Put Options:\n","def mc_put_geom_tf(enable_greeks=True):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.pow(tf.reduce_prod(S_i, axis=1), dt / T)\n","    payout = tf.maximum(K - A, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)                          # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m2-fL7VqTx2k","colab_type":"text"},"source":["## Performance Tests"]},{"cell_type":"markdown","metadata":{"id":"OgMPC1CdfbmO","colab_type":"text"},"source":["### Debugging"]},{"cell_type":"code","metadata":{"id":"fvVxlbI7gKu8","colab_type":"code","colab":{}},"source":["seed = np.random.randint(1,500)\n","geometric = mc_call_geom_tf()\n","r = 0.02\n","sigma = 0.1\n","T = 1\n","S0 = 2.0\n","geometric(2.0, 2.0, 1, 0.1, 0.02, 1312, 1000000, 8)\n","#seed = np.random.randint(1,500)\n","#arithmetic = mc_call_arithm_tf()\n","#arithmetic(S0,K,T,sigma,r,1312,it,N)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3yysDtpMgUoH","colab_type":"code","colab":{}},"source":["Black_Scholes = bsm_call_tf()\n","Results = Black_Scholes(S0,K,T,sigma,r)\n","#c_greeks_tidy = pd.DataFrame({\"Asset Price (S)\":c_greeks[:,0], \"Volatility\":c_greeks[:,1],\"Time to Expiry\":c_greeks[:,4]},index=['Option Price', 'Delta', 'Vega','Gamma','Vomma'])\n","#print(c_greeks_tidy)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GnRDaSeCkkOI","colab_type":"text"},"source":["### Black-Scholes vs. Monte Carlo: Call Options with Geometric Average"]},{"cell_type":"code","metadata":{"id":"lTzgsDfaZMSQ","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  bs = bsm_call(r,q,T,i,S0,sigma)\n","  mc = mc_call_geom(it,r,q,T,i,N,S0,sigma)\n","  error = np.abs((bs-mc)/bs)*100\n","  print('G_c(K=%d,T=%d):'%(i,T))\n","  print('Black-Scholes:',bs)\n","  print('Monte Carlo:', mc)\n","  print('Error: %f%%' % error)\n","  print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cveiRvp9k6of","colab_type":"text"},"source":["### Black-Scholes vs. Monte Carlo: Put Options with Geometric Average"]},{"cell_type":"code","metadata":{"id":"SLuAHSPaw4WU","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  bs = bsm_put(r,q,T,i,S0,sigma)\n","  mc = mc_put_geom(it,r,q,T,i,N,S0,sigma)\n","  error = np.abs((bs-mc)/bs)*100\n","  print('G_p(K=%d,T=%d):'%(i,T))\n","  print('Black-Scholes:',repr(bs))\n","  print('Monte Carlo:',repr(mc))\n","  print('Error:',repr(error),'%')\n","  print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7w1N-UPPGLzu","colab_type":"text"},"source":["### Asian call options with arithmetic average: Test Cases (Linetsky 2002):\n"]},{"cell_type":"markdown","metadata":{"id":"MXyI1G42H0rh","colab_type":"text"},"source":["#### **Test Cases: Parameters**\n","**%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%**\n","\n","**C &emsp; r &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; Ïƒ &emsp; &emsp; &emsp; &emsp;T &emsp; S0&emsp; &emsp; EE&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; MC &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; %Err**\n","\n","1 &emsp; 0.0200 &emsp; 0.10 &emsp; 1 &emsp; 2.0 &emsp; 0.05602 &emsp; 0.0559860415 &emsp; 0.017\n","\n","2 &emsp; 0.1800 &emsp; 0.30 &emsp; 1 &emsp; 2.0 &emsp; 0.21850 &emsp; 0.2183875466 &emsp; 0.059\n","\n","3 &emsp; 0.0125 &emsp; 0.25 &emsp; 2 &emsp; 2.0 &emsp; 0.17250 &emsp; 0.1722687410 &emsp; 0.063\n","\n","4 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 1.9 &emsp; 0.19330 &emsp; 0.1931737903 &emsp; 0.084\n","\n","5 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 2.0 &emsp; 0.24650 &emsp; 0.2464156905 &emsp; 0.095\n","\n","6 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 2.1 &emsp; 0.30640 &emsp; 0.3062203648 &emsp; 0.106\n","\n","7 &emsp; 0.0500 &emsp; 0.50 &emsp; 2 &emsp; 2.0 &emsp; 0.35030 &emsp; 0.3500952190 &emsp; 0.146\n","\n","**%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%**\n","\n","**Notes:**\n","* *(EE = Eigenfunction Expansion i.e. the Black-Scholes analytic result in \n","this algorithm; MC = Monte-Carlo estimate);*\n","* *All test cases have a strike K = 2.0 and a dividend yield q = 0.0;*"]},{"cell_type":"markdown","metadata":{"id":"-AnTyIj-LJ1w","colab_type":"text"},"source":["#### Set K = 2.0, q = 0.0:"]},{"cell_type":"code","metadata":{"id":"9wEC1O1OF6K_","colab_type":"code","colab":{}},"source":["# In all test cases, K = 2.0 and q = 0.0:\n","K = 2.0\n","q = 0.0"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ipqVRR53LQ6_","colab_type":"text"},"source":["#### Test Cases:"]},{"cell_type":"code","metadata":{"id":"hJHkIHokVnfA","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 1:\n","r = 0.02\n","sigma = 0.1\n","T = 1\n","S0 = 2.0\n","\n","lntk1 = 0.0559860415\n","mc = mc_call_arithm(it,0.02,q,1,2.0,N,2.0,0.1)\n","error = np.abs((lntk1-mc)/lntk1)*100\n","print('Case 1 (r=0.02, sigma=0.10, T=1, S0=2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk1))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lbEU9pWEx4nF","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 2:\n","r = 0.18\n","sigma = 0.30\n","T = 1.0\n","S0 = 2.0\n","\n","lntk2 = 0.2183875466\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk2-mc)/lntk2)*100\n","print('Case 2 (r = 0.18, sigma = 0.30, T = 1, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk2))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vdvy2z-ux9-P","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 3:\n","r = 0.0125\n","sigma = 0.25\n","T = 2.0\n","S0 = 2.0\n","\n","lntk3 = 0.1722687410\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk3-mc)/lntk3)*100\n","print('Case 3 (r = 0.0125, sigma = 0.25, T = 2, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,2))\n","print('Linetsky:',repr(lntk3))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UzGStZi6yC7V","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 4:\n","r = 0.05\n","sigma = 0.50\n","T = 1.0\n","S0 = 1.9\n","\n","lntk4 = 0.1931737903\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk4-mc)/lntk4)*100\n","print('Case 4 (r = 0.05, sigma = 0.50, T = 1, S0 = 1.9):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk4))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YHPuk2L3yD2Z","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 5:\n","r = 0.05\n","sigma = 0.50\n","T = 1.0\n","S0 = 2.0\n","\n","lntk5 = 0.2464156905\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk5-mc)/lntk5)*100\n","print('Case 5 (r = 0.05, sigma = 0.50, T = 1, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk5))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vBnu71z7yK33","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 6:\n","r = 0.05\n","sigma = 0.50\n","T = 1.0\n","S0 = 2.1\n","\n","lntk6 = 0.3062203648\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk6-mc)/lntk6)*100\n","print('Case 6 (r = 0.05, sigma = 0.50, T = 1, S0 = 2.1):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk6))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eptexy9gyNl2","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 7:\n","r = 0.05\n","sigma = 0.50\n","T = 2.0\n","S0 = 2.0\n","\n","lntk7 = 0.3500952190\n","mc = mc_call_arithm(it,r,q,T,K,N,S0,sigma)\n","error = np.abs((lntk7-mc)/lntk7)*100\n","print('Case 7 (r = 0.05, sigma = 0.50, T = 2.0, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,2))\n","print('Linetsky:',repr(lntk7))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9HcItrRWzr-z","colab_type":"text"},"source":["## Error Estimation"]},{"cell_type":"markdown","metadata":{"id":"T1s5HjiAzytF","colab_type":"text"},"source":["### Monte Carlo Geometric Pricer:"]},{"cell_type":"markdown","metadata":{"id":"yeoXbvpMz_lk","colab_type":"text"},"source":["**Sensitivity of Monte Carlo pricer to number of simulations:**\n","\n","The results of 1000,5000,10000,50000,100000,500000,1000000, and 5000000 iterations are compared to the Black-Scholes theoretical price. The errors are then plotted against the number of iterations in order to determine the sensitivity of the pricing algorithm to the number of iterations.\n","\n","**The following constants are used in all experiments:**\n","* S0 = 100\n","* r = 0.15\n","* q = 0.0\n","* T = 1.0\n","* sigma = 0.3\n","* K = 95"]},{"cell_type":"code","metadata":{"id":"Llfmlvyx2J1W","colab_type":"code","colab":{}},"source":["it_cases = [1000,5000,10000,50000,100000,500000,1000000]\n","bsm_call = bsm_call_tf()\n","bsm_c = bsm_call(100,95,1,0.3,0.15)\n","bsm_c = bsm_c[0]\n","print('The Black-Scholes Theoretical Price is:',bsm_c)\n","errors = []\n","mc_call = mc_call_geom_tf()\n","# Call Options:\n","for i in range(0,len(it_cases)):\n","  seed = np.random.randint(1,500)\n","  mc_c = mc_call(100,95,1,0.3, 0.15, 1312, it_cases[i], 8)\n","  mc_c = mc_c[0]\n","  print('For %d iterations, the Monte Carlo estimate is:' %it_cases[i],mc_c)\n","  error = 100 * (np.abs(mc_c-bsm_c)/bsm_c)\n","  errors.append(error)\n","\n","print(errors)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RlRnlaUyYrqF","colab_type":"text"},"source":["## Hedging Tests"]},{"cell_type":"markdown","metadata":{"id":"Ew6DgFv1Y66g","colab_type":"text"},"source":["### Daily Data Generation"]},{"cell_type":"code","metadata":{"id":"zMN9YCwnNb74","colab_type":"code","colab":{}},"source":["data_generator = tf_gbm_paths()\n","prices = [100,110,150,250,150,100,230,120,210,150]\n","daily_data = np.ones((10,N))\n","S_geometric = np.ones((10,1))\n","payoffs = np.ones((10,1))\n","for i in range(0,10):\n","  seed = np.random.randint(1,5000)\n","  daily_data[i] = data_generator(prices[i],95,1,0.3,0.15,seed,1,100000)\n","  S_geometric[i] = np.exp(np.mean(np.log(daily_data[i,:])))\n","  payoffs[i] = np.exp(-r * T) * max(S_geometric[i] - K, 0)\n","\n","plt.figure(figsize=(width,height))\n","_= plt.plot(np.transpose(daily_data))\n","_ = plt.title('Simulated Stock Prices',fontsize=title_size,color='w')\n","_ = plt.ylabel('Price',fontsize=ylabel_size,color='w')\n","_ = plt.xlabel('Time Step',fontsize=xlabel_size,color='w')\n","\n","#plt.figure(figsize=(width,height))\n","#_= plt.plot(payoffs)\n","#_ = plt.title('Payouts',fontsize=title_size,color='w')\n","#_ = plt.ylabel('Price',fontsize=ylabel_size,color='w')\n","#_ = plt.xlabel('Time Step',fontsize=xlabel_size,color='w')\n","\n","#print(payoffs)"],"execution_count":0,"outputs":[]}]}