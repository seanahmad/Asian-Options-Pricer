{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pricer_FINAL_v15_0","provenance":[],"collapsed_sections":["GnRDaSeCkkOI","cveiRvp9k6of","7w1N-UPPGLzu","T1s5HjiAzytF","SQ6-Hxx5gwSx","T3OoH0xmXYMj","GLzU35BtnrTS"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"zY4InIR-t8Bp","colab_type":"text"},"source":["\n","# **Valuation of Asian Options using the Lévy Approximation**"]},{"cell_type":"markdown","metadata":{"id":"frIs7Laf6OxE","colab_type":"text"},"source":["Course: FE 620: Pricing & Hedging | Stevens Institute of Technology\n","\n","Advisor: Dan Pirjol\n","\n","Group: Theo Dimitrasopoulos, Will Kraemer, Vaikunth Seshadri, Snehal Rajguru\n","\n","Link: https://colab.research.google.com/drive/1fkbdI6gv3XV-pRJINI3C9klRIuGylLDX\n","\n","*Version: v15.0*"]},{"cell_type":"markdown","metadata":{"id":"nqNjBKHR8PDW","colab_type":"text"},"source":["## **Comments**"]},{"cell_type":"markdown","metadata":{"id":"nVu-qfqTZ-Pq","colab_type":"text"},"source":["**Instructions:**\n","\n","* Click the execution button on the top left corner of each code cell to execute it. To run all cells in descending order, go to the menu bar at the top and click Runtime -> Run all (or use the **Ctrl-F9** or **⌘-F9** hotkey for Windows and MacOSX respectively);\n","* If the code is running slowly, go to Runtime -> Change runtime type, and change the Runtime Shape to High-RAM from the dropdown menu;\n","* The **\"!pip install\"** lines under the Python packages section (i.e. lines 3-5) only need to be executed the first time you run the notebook. If you receive the message **\"Requirement already satisfied:\"**, wrap them in treble quotes (add the quotes in lines 2 & 6)*.\n"]},{"cell_type":"markdown","metadata":{"id":"1y0MSUdkZ5WL","colab_type":"text"},"source":["**Professor feedback:**\n","* You could repeat the MC simulation for 100,1000,10k runs and plot the errors vs #runs. The error should scale like 1/sqrt(runs). A log-log plot should be a line with slope -1/2. [DONE]\n","* An additional test could take several numbers of MC samples (iterations) and plot the log(error) vs log(iterations). Even 2 or 3 points would be sufficient. They should line up on a straight line with slope -0.5 corresponding to the 1/sqrt(N) scaling expected for MC simulations [DONE]."]},{"cell_type":"markdown","metadata":{"id":"d5l3s8YATLLE","colab_type":"text"},"source":["## **Python Packages**"]},{"cell_type":"code","metadata":{"id":"VRbkpjmc_DFg","colab_type":"code","colab":{}},"source":["# Install packages\n","'''\n","!pip install -q numpy\n","!pip install -q matplotlib\n","!pip install -q scipy\n","!pip install -q quandl\n","!pip install -q yfinance\n","!pip install -q pandas\n","'''\n","\n","# Import Packages\n","import math\n","import random\n","import numpy as np\n","#######\n","from scipy.stats import norm\n","from scipy.integrate import quad\n","#######\n","import matplotlib as mpl\n","import mpl_toolkits.mplot3d.axes3d as p3\n","import matplotlib.pyplot as plt\n","from matplotlib import cm\n","#######\n","import tensorflow.compat.v1 as tf\n","tf.disable_v2_behavior()\n","#######\n","#import pandas as pd\n","#import quandl\n","#import timeit"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rA02G58pTXXy","colab_type":"text"},"source":["## **Plotting**"]},{"cell_type":"code","metadata":{"id":"gaVvMo9XadEl","colab_type":"code","cellView":"both","colab":{}},"source":["# Universal Plot width\n","width = 25 #@param {type:\"integer\"}\n","\n","# Universal Plot height\n","height =  14#@param {type:\"integer\"}\n","\n","# Universal xtick size\n","xtick_size = 8 #@param {type:\"integer\"}\n","\n","# Universal ytick size\n","ytick_size =  8#@param {type:\"integer\"}\n","\n","# Universal title font size\n","title_size = 20 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","xlabel_size = 15 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","ylabel_size = 15 #@param {type:\"integer\"}\n","\n","# Universal zlabel font size\n","zlabel_size = 15 #@param {type:\"integer\"}\n","\n","# Universal legend font size\n","legend_size = 10 #@param {type:\"integer\"}\n","\n","# Universal plot font color\n","color_plots = 'w'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zk2eSNqcjRf6","colab_type":"code","colab":{}},"source":["plt.rcParams['figure.figsize'] = (width,height)\n","params = {'text.color' : color_plots,\n","          'xtick.color' : color_plots,\n","          'ytick.color' : color_plots,\n","          'xtick.labelsize' : xtick_size,\n","          'ytick.labelsize' : ytick_size,\n","          'legend.loc' : 'upper left',\n","         }\n","plt.rcParams.update(params)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aFneK_QsvZnF","colab_type":"text"},"source":["## **Definitions**"]},{"cell_type":"markdown","metadata":{"id":"TT4Ldy_Zs0wZ","colab_type":"text"},"source":["### Brownian Path Generator"]},{"cell_type":"code","metadata":{"id":"KmMR6l_CszW4","colab_type":"code","colab":{}},"source":["def bm_paths(timesteps):\n","  seed = random.random()\n","  dt = T / timesteps\n","  bt = np.random.normal(0., 1., timesteps)*np.sqrt(dt)\n","  W = np.cumsum(bt)\n","  return W"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rbDVOtPwGLCd","colab_type":"text"},"source":["### Geometric Brownian Path Generator"]},{"cell_type":"markdown","metadata":{"id":"OKzP_3peQcln","colab_type":"text"},"source":["#### Conventional Implementation:"]},{"cell_type":"code","metadata":{"id":"NR2JccwqGNCM","colab_type":"code","colab":{}},"source":["def gbm_paths(S0,K,T,t,r,q,sigma,timesteps):\n","  dt = np.linspace(0, T, timesteps)\n","  bt = np.random.normal(0., 1., int(timesteps))*np.sqrt(T/timesteps)\n","  W = np.cumsum(bt)\n","  S = S0 * np.exp(sigma * W + (r - q - 0.5 * (sigma**2)) * dt)\n","  S = np.insert(S, 0, S0)\n","  return S"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1p6oWOZqQe3M","colab_type":"text"},"source":["#### Tensorflow Implementation:"]},{"cell_type":"code","metadata":{"id":"2rHEGL8cHnaf","colab_type":"code","colab":{}},"source":["def tf_graph_gbm_paths():\n","  S0 = tf.placeholder(tf.float32)\n","  K = tf.placeholder(tf.float32)\n","  dt = tf.placeholder(tf.float32)\n","  T = tf.placeholder(tf.float32)\n","  sigma = tf.placeholder(tf.float32)\n","  r = tf.placeholder(tf.float32)\n","  dw = tf.placeholder(tf.float32)\n","  S_i = S0 * tf.cumprod(tf.exp((r-sigma**2/2)*dt+sigma*tf.sqrt(dt)*dw), axis=1)\n","  return (S0, K, dt, T, sigma, r, dw, S_i)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yjSR-0xRhFiQ","colab_type":"code","colab":{}},"source":["def tf_gbm_paths():\n","  (S0,K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","  def paths(S_zero, strk, maturity, riskfrate, volatility, seed, iterations, timesteps):\n","    if seed != 0:\n","      np.random.seed(seed)\n","    stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","    with tf.Session() as sess:\n","      delta_t = maturity / timesteps\n","      res = sess.run(S_i, \n","                     {\n","                         S0: S_zero,\n","                         K : strk,\n","                         r : riskfrate,\n","                         sigma: volatility,\n","                         dt : delta_t,\n","                         T: maturity,\n","                         dw : stdnorm_random_variates})\n","      return res\n","  return paths"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6y3QPkQmM9pC","colab_type":"text"},"source":["### Black-Scholes Theoretical Price\n","Call and Put Asian option prices with geometric averaging. The alternative implementation in Tensorlfow offers efficiency and includes the calculations of 1st 2nd and 3rd order Greeks."]},{"cell_type":"markdown","metadata":{"id":"AijNZZ9kOq1V","colab_type":"text"},"source":["#### Conventional Implementation"]},{"cell_type":"code","metadata":{"id":"R00bkbuCNOWw","colab_type":"code","colab":{}},"source":["# Call Options:\n","def bsm_call(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  c = np.exp(-r * (T - t)) * (G0 * N(d1) - K * N(d2))\n","  return c\n","\n","# Put Options:\n","def bsm_put(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  p = np.exp(-r * (T - t)) * (K * N(-d2) - G0 * N(-d1))\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wsUvBln-O7dg","colab_type":"text"},"source":["#### Tensorflow Implementation"]},{"cell_type":"code","metadata":{"id":"eVzV3kWCpqDj","colab_type":"code","colab":{}},"source":["# Call Options:\n","def bsm_call_tf(enable_greeks = False):\n","    S0 = tf.placeholder(tf.float32)\n","    K = tf.placeholder(tf.float32)\n","    dt = tf.placeholder(tf.float32)\n","    sigma = tf.placeholder(tf.float32)\n","    r = tf.placeholder(tf.float32)\n","    q = tf.placeholder(tf.float32)    \n","    G0 = S0 * tf.exp(0.5 * (r * dt) - ((tf.math.square(sigma)) * dt)/12)\n","    Sigma_G = sigma/tf.sqrt(3.0)\n","    Phi = tf.distributions.Normal(0.,1.).cdf\n","    d_1 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) + 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    d_2 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) - 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    npv =  tf.exp(-r * dt) * (G0 * Phi(d_1) - K * Phi(d_2))                # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","         \n","    def execute_graph(S_zero, strk, maturity, riskfrate, volatility):\n","        with tf.Session() as sess:\n","            res = sess.run(target_calc, \n","                           {\n","                               S0: S_zero,\n","                               K : strk,\n","                               r : riskfrate,\n","                               sigma: volatility,\n","                               dt: maturity})\n","        return res\n","    return execute_graph\n","\n","# Put Options:\n","def bsm_put_tf(enable_greeks = False):\n","    S0 = tf.placeholder(tf.float32)\n","    K = tf.placeholder(tf.float32)\n","    dt = tf.placeholder(tf.float32)\n","    sigma = tf.placeholder(tf.float32)\n","    r = tf.placeholder(tf.float32)\n","    q = tf.placeholder(tf.float32)    \n","    G0 = S0 * tf.exp(0.5 * (r * dt) - ((tf.math.square(sigma)) * dt)/12)\n","    Sigma_G = sigma/tf.sqrt(3.0)\n","    Phi = tf.distributions.Normal(0.,1.).cdf\n","    d_1 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) + 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    d_2 = (1/(Sigma_G * tf.sqrt(dt))) * (tf.log(G0/K) - 0.5 * (tf.math.square(Sigma_G)) * dt)\n","    npv =  tf.exp(-r * dt) * (K * Phi(-d_2) - G0 * Phi(-d_1))              # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","     \n","    def execute_graph(S_zero, strk, maturity, riskfrate, volatility):\n","        with tf.Session() as sess:\n","            res = sess.run(target_calc, \n","                           {\n","                               S0: S_zero,\n","                               K : strk,\n","                               r : riskfrate,\n","                               sigma: volatility,\n","                               dt: maturity})\n","        return res\n","    return execute_graph"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"DWicIVv3enkX"},"source":["### Monte Carlo Simulator with Arithmetic Average (TODO)\n","Call and Put Asian option prices with arithmetic averaging. The alternative implementation in Tensorlfow offers efficiency and includes the calculations of 1st 2nd and 3rd order Greeks."]},{"cell_type":"markdown","metadata":{"id":"YEIcJDQhe_Fx","colab_type":"text"},"source":["#### Conventional Interpretation"]},{"cell_type":"code","metadata":{"id":"bcOoGNSVfBoQ","colab_type":"code","colab":{}},"source":["# Call Options:\n","def mc_call_arithm(S0, K, T, t, r, q, sigma,iterations,timesteps):\n","  mc_call_arithm_payoffs = []\n","  for i in range(1,iterations):\n","    S = gbm_paths(S0, K, T, t, r, q, sigma, iterations, timesteps)\n","    S_arithm = np.sum(S)/len(S)\n","    mc_call_arithm_payoffs.append(np.exp(-r * T) * max(S_arithm - K, 0))\n","  c = np.mean(mc_call_arithm_payoffs)\n","  return c\n","\n","# Put Options:\n","def mc_put_arithm(S0, K, T, t, r, q, sigma,iterations,timesteps):\n","  mc_put_arithm_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(S0, K, T, t, r, q, sigma, iterations, timesteps)\n","    S_arithm = np.sum(S)/len(S)\n","    mc_put_arithm_payoffs.append(np.exp(-r * T) * max(K - S_arithm, 0))\n","  p = np.mean(mc_put_arithm_payoffs)\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Wweo2-IyeiHp"},"source":["#### Tensorflow Implementation:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"cmRdXzAEehv3","colab":{}},"source":["# Call Options:\n","def mc_call_arithm_tf(enable_greeks=False):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.reduce_sum(S_i, axis=1)/(T/dt)\n","    payout = tf.maximum(A - K, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)\n","    target_calc = [npv]\n","    if enable_greeks:\n","      greeks = tf.gradients(npv, [S0, sigma, dt]) # delta, vega, theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt]) # gamma, vanna, charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt]) # vanna, vomma/volga, veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt]) # speed, zomma, color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt]) # N/A, ultima, totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer\n","\n","\n","# Put Options:\n","def mc_put_arithm_tf(enable_greeks=False):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.reduce_sum(S_i, axis=1)/(T/dt)\n","    payout = tf.maximum(K - A, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)\n","    target_calc = [npv]\n","    if enable_greeks:\n","      greeks = tf.gradients(npv, [S0, sigma, dt]) # delta, vega, theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt]) # gamma, vanna, charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt]) # vanna, vomma/volga, veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt]) # speed, zomma, color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt]) # N/A, ultima, totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, volatility, riskfrate, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b1Fu5swGul_x","colab_type":"text"},"source":["### Monte Carlo Simulator with Geometric Average"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ZRckDhUieqjR"},"source":["#### Conventional Implementation"]},{"cell_type":"code","metadata":{"id":"OMdz05wy3gLv","colab_type":"code","colab":{}},"source":["#def mean_confidence_interval(data, confidence=0.95):\n","#    a = 1.0 * np.array(data)\n","#    n = len(a)\n","#    m, se = np.mean(a), scipy.stats.sem(a)\n","#    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)\n","#    return m, m-h, m+h\n","#\n","#        list.append(mean)\n","#        mean_\n","#        upper_list.append(mean + (1.96 * std / np.sqrt(i)))\n","#        lower_list.append(mean - (1.96 * std / np.sqrt(i)))\n","\n","# Call Options:\n","def mc_call_geom(S0, K, T, t, r, q, sigma,iterations,timesteps):\n","  mc_call_geom_payoffs = []\n","  for i in range(1,iterations):\n","    S = gbm_paths(S0, K, T, t, r, q, sigma, iterations, timesteps)\n","    S_geom_mu = np.exp(np.mean(np.log(S)))\n","    mc_call_geom_payoffs.append(np.exp(-r * T) * max(S_geom_mu - K, 0))\n","  c = np.mean(mc_call_geom_payoffs)\n","  return c\n","\n","# Put Options:\n","def mc_put_geom(S0, K, T, t, r, q, sigma,iterations,timesteps):\n","  mc_put_geom_payoffs = []\n","  for i in range(1,it):\n","    S = gbm_paths(S0, K, T, t, r, q, sigma, iterations, timesteps)\n","    S_geom = np.exp(np.mean(np.log(S)))\n","    mc_put_geom_payoffs.append(np.exp(-r * T) * max(K - S_geom, 0))\n","  p = np.mean(mc_put_geom_payoffs)\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIU7eftjcQXq","colab_type":"text"},"source":["#### Tensorflow Implementation"]},{"cell_type":"code","metadata":{"id":"WNRGP7V-cTya","colab_type":"code","colab":{}},"source":["# Call Options:\n","def mc_call_geom_tf(enable_greeks=True):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.pow(tf.reduce_prod(S_i, axis=1), dt / T)\n","    payout = tf.maximum(A - K, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)                          # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, riskfrate, volatility, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer\n","\n","# Put Options:\n","def mc_put_geom_tf(enable_greeks=True):\n","    (S0, K, dt, T, sigma, r, dw, S_i) = tf_graph_gbm_paths()\n","    A = tf.pow(tf.reduce_prod(S_i, axis=1), dt / T)\n","    payout = tf.maximum(K - A, 0)\n","    npv = tf.exp(-r * T) * tf.reduce_mean(payout)                          # GREEKS TABLE:\n","    target_calc = [npv]                                                    # (e.g. Option Price with respect to Asset Price (S) is delta)\n","    if enable_greeks:                                                      #                Asset Price (S)   Volatility    Time to Expiry\n","      greeks = tf.gradients(npv, [S0, sigma, dt])                          # Option Price |     delta            vega           theta\n","      dS_2nd = tf.gradients(greeks[0], [S0, sigma, dt])                    # Delta        |     gamma            vanna          charm\n","      dsigma_2nd = tf.gradients(greeks[1], [S0, sigma, dt])                # Vega         |     vanna         vomma/volga       veta\n","      dT_2nd = tf.gradients(dS_2nd[0], [S0, sigma, dt])                    # Gamma        |     speed            zomma          color\n","      dsigma_3rd = tf.gradients(dsigma_2nd[1], [S0, sigma, dt])            # Vomma        |      N/A             ultima         totto\n","      target_calc += [greeks, dS_2nd, dsigma_2nd, dT_2nd, dsigma_3rd]\n","    def pricer(S_zero, strk, maturity, riskfrate, volatility, seed, iterations, timesteps):\n","      if seed != 0:\n","        np.random.seed(seed)\n","      stdnorm_random_variates = np.random.randn(iterations, timesteps)\n","      with tf.Session() as sess:\n","        delta_t = maturity / timesteps\n","        res = sess.run(target_calc,\n","                       {\n","                           S0: S_zero,\n","                           K: strk,\n","                           r: riskfrate,\n","                           sigma: volatility,\n","                           dt: delta_t,\n","                           T: maturity,\n","                           dw: stdnorm_random_variates})\n","        return res\n","    return pricer"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ua3PUYJ5el2v","colab_type":"text"},"source":["#### BSM Option Sensitivity"]},{"cell_type":"code","metadata":{"id":"AhC9XI-GeqdF","colab_type":"code","colab":{}},"source":["def bsm_plot_values(function,S0):\n","    plt.figure(figsize=(20, 16.6))\n","    points = 100\n","\n","    # Option(K,T) vs. Strike\n","    plt.subplot(221)\n","    klist = np.linspace(K-30, K+30, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma) for K in klist]\n","    plt.plot(klist, vlist)\n","    plt.grid()\n","    plt.title('')\n","    plt.xlabel('Strike $K$', color = color_plots, fontsize = xlabel_size)\n","    plt.ylabel('Present Value', color = color_plots)\n","\n","    # Option(K,T) vs. Time\n","    plt.subplot(222)\n","    tlist = np.linspace(0.0001, T, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma) for T in tlist]\n","    plt.plot(tlist, vlist)\n","    plt.grid(True)\n","    plt.xlabel('Maturity $T$', color = color_plots)\n","\n","    # Option(K,T) vs. r\n","    plt.subplot(223)\n","    rlist = np.linspace(0, r, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma) for r in rlist]\n","    plt.plot(tlist, vlist)\n","    plt.grid(True)\n","    plt.xlabel('r rate $r$', color = color_plots)\n","    plt.ylabel('Present Value', color = color_plots)\n","    plt.axis('tight')\n","\n","    # Option(K,T) vs. Implied Vol.\n","    plt.subplot(224)\n","    slist = np.linspace(0.01, sigma, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma) for sigma in slist]\n","    plt.plot(slist, vlist)\n","    plt.grid(True)\n","    plt.xlabel('Implied Volatility $\\sigma$', color = color_plots)\n","    plt.tight_layout()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LQlqZfpFk0IT","colab_type":"text"},"source":["### Monte Carlo Option Sensitivity (TODO)"]},{"cell_type":"code","metadata":{"id":"CHeLCMQmk4qd","colab_type":"code","colab":{}},"source":["def mc_plot_values(function,optiontype):\n","    #optiontype between 'C' and 'P'\n","    plt.figure(figsize=(20, 16.6))\n","    points = 1000\n","\n","    # optiontype(K,T) vs. Strike\n","    plt.subplot(221)\n","    klist = np.linspace(K-30, K+30, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma,iterations,timesteps) for K in klist]\n","    plt.plot(klist, vlist)\n","    plt.grid()\n","    plt.title('Monte Carlo %s(K,T) vs. Strike' % optiontype, color = color_plots, fontsize = title_size)\n","    plt.xlabel('Strike $K$', color = color_plots)\n","    plt.ylabel('Present Value', color = color_plots, fontsize = ylabel_size)\n","\n","    # optiontype(K,T) vs. Time\n","    plt.subplot(222)\n","    tlist = np.linspace(0.0001, T, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma,iterations,timesteps) for T in tlist]\n","    plt.plot(tlist, vlist)\n","    plt.grid(True)\n","    plt.title('Monte Carlo %s(K,T) vs. Time' % optiontype, color = color_plots, fontsize = title_size)\n","    plt.xlabel('Maturity $T$', color = color_plots)\n","    plt.ylabel('Present Value', color = color_plots, fontsize = ylabel_size)\n","\n","\n","    # optiontype(K,T) vs. r\n","    plt.subplot(223)\n","    rlist = np.linspace(0, r, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma,iterations,timesteps) for r in rlist]\n","    plt.plot(tlist, vlist)\n","    plt.grid(True)\n","    plt.title('Monte Carlo %s(K,T) vs. r' % optiontype, color = color_plots, fontsize = title_size)\n","    plt.xlabel('r rate $r$', color = color_plots, fontsize = xlabel_size)\n","    plt.ylabel('Present Value', color = color_plots, fontsize = ylabel_size)\n","    plt.axis('tight')\n","\n","    # optiontype(K,T) vs. Implied Vol.\n","    plt.subplot(224)\n","    slist = np.linspace(0.01, sigma, points)\n","    vlist = [function(S0, K, T, t, r, q, sigma,iterations,timesteps) for sigma in slist]\n","    plt.plot(slist, vlist)\n","    plt.grid(True)\n","    plt.title('Monte Carlo %s(K,T) vs. Implied Volatility' % optiontype, color = color_plots, fontsize = title_size)\n","    plt.xlabel('Implied Volatility $\\sigma$', color = color_plots, fontsize = xlabel_size)\n","    plt.ylabel('Present Value', color = color_plots, fontsize = ylabel_size)\n","    plt.tight_layout()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"faPZti8LjYd7","colab_type":"text"},"source":["### PDF, CDF Analytical Calculations:"]},{"cell_type":"code","metadata":{"id":"YEq_axKigbtx","colab_type":"code","colab":{}},"source":["# Probability density function of standard normal\n","def dN(x):\n","  return math.exp(-0.5 * x ** 2) / math.sqrt(2 * math.pi)\n","\n","# Cumulative density function of standard normal\n","def N(u):\n","  return quad(lambda x: dN(x), -20, u, limit=50)[0]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RlRnlaUyYrqF","colab_type":"text"},"source":["### BSM Greeks"]},{"cell_type":"markdown","metadata":{"id":"W8Bsor2Hjkf_","colab_type":"text"},"source":["#### Greeks Derivations"]},{"cell_type":"code","metadata":{"id":"0TrXkqAWxAxT","colab_type":"code","colab":{}},"source":["# Delta\n","def bsm_delta(S0, K, T, t, r, q, sigma):\n","    G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","    Sigma_G = sigma/np.sqrt(3)\n","    d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","    delta = N(d1)\n","    return delta\n","\n","# Gamma\n","def bsm_gamma(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  gamma = dN(d1) / (S0 * sigma * math.sqrt(T - t))\n","  return gamma\n","\n","# Theta\n","def bsm_theta(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  theta = -(S0 * dN(d1) * sigma / (2 * math.sqrt(T - t)) +\n","            r * K * math.exp(-r * (T - t)) * N(d2))\n","  return theta\n","\n","# Rho\n","def bsm_rho(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)  \n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  rho = K * (T - t) * math.exp(-r * (T - t)) * N(d2)\n","  return rho\n","\n","# Vega\n","def bsm_vega(S0, K, T, t, r, q, sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  vega = S0 * dN(d1) * math.sqrt(T - t)\n","  return vega"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HwSOCFiejr3P","colab_type":"text"},"source":["#### Greeks Plots"]},{"cell_type":"code","metadata":{"id":"_w_-nGaIjuk1","colab_type":"code","colab":{}},"source":["def plot_greeks_bsm(function, greek):\n","  tlist = np.linspace(0.01, T, 50)\n","  klist = np.linspace(K -30, K + 30, 50)\n","  V = np.zeros((len(tlist), len(klist)), dtype=np.float)\n","  for j in range(len(klist)):\n","    for i in range(len(tlist)):\n","      V[i, j] = function(S0, klist[j], tlist[i], t, r, q, sigma,)\n","\n","  x, y = np.meshgrid(klist, tlist)\n","  fig = plt.figure(figsize=(width, height))\n","  plot = p3.Axes3D(fig)\n","  plot.patch.set_alpha(0.0)\n","  plot.plot_wireframe(x, y, V, linewidth=1.0, color = color_plots) #cmap = cm.RdYlGn, for surface plotting\n","  plot.set_title('%s(K, T) Plot' % greek, color = color_plots, fontsize = title_size)\n","  plot.set_xlabel('Strike $K$', color = color_plots, fontsize = xlabel_size)\n","  plot.set_ylabel('Maturity $T$', color = color_plots, fontsize = ylabel_size)\n","  plot.set_zlabel('%s(K, T)' % greek, color = color_plots, fontsize = zlabel_size)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EztiVGNhfa9l","colab_type":"text"},"source":["### MC Greeks (TODO)"]},{"cell_type":"markdown","metadata":{"id":"hMpWRmPzqfv-","colab_type":"text"},"source":["#### Greeks Derivations"]},{"cell_type":"code","metadata":{"id":"ytX2mnrorCsf","colab_type":"code","colab":{}},"source":["# Delta\n","def mc_delta(S0, K, T, t, r, q, sigma, iterations, timesteps):\n","    G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","    Sigma_G = sigma/np.sqrt(3)\n","    d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","    delta = N(d1)\n","    return delta\n","\n","# Gamma\n","def mc_gamma(S0, K, T, t, r, q, sigma, iterations, timesteps):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  gamma = dN(d1) / (S0 * sigma * math.sqrt(T - t))\n","  return gamma\n","\n","# Theta\n","def mc_theta(S0, K, T, t, r, q, sigma, iterations, timesteps):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  theta = -(S0 * dN(d1) * sigma / (2 * math.sqrt(T - t)) +\n","            r * K * math.exp(-r * (T - t)) * N(d2))\n","  return theta\n","\n","# Rho\n","def mc_rho(S0, K, T, t, r, q, sigma, iterations, timesteps):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)  \n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  d2 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * (T - t))\n","  rho = K * (T - t) * math.exp(-r * (T - t)) * N(d2)\n","  return rho\n","\n","# Vega\n","def mc_vega(S0, K, T, t, r, q, sigma, iterations, timesteps):\n","  G0 = S0 * np.exp(0.5 * (r - q) * (T - t) - ((sigma**2) * (T - t))/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T - t))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * (T - t))\n","  vega = S0 * dN(d1) * math.sqrt(T - t)\n","  return vega"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"p6G26S2265Mr","colab_type":"text"},"source":["#### Greeks Plots"]},{"cell_type":"code","metadata":{"id":"_U7ogYEM67LX","colab_type":"code","colab":{}},"source":["def plot_greeks_mc(function, greek):\n","  tlist = np.linspace(0.01, T, 500)\n","  klist = np.linspace(K -30, K + 30, 500)\n","  V = np.zeros((len(tlist), len(klist)), dtype=np.float)\n","  for j in range(len(klist)):\n","    for i in range(len(tlist)):\n","      V[i, j] = function(S0, klist[j], tlist[i], t, r, q, sigma,)\n","\n","  x, y = np.meshgrid(klist, tlist)\n","  fig = plt.figure(figsize=(width, height))\n","  plot = p3.Axes3D(fig)\n","  plot.patch.set_alpha(0.0)\n","  plot.plot_wireframe(x, y, V, linewidth=1.0, color = color_plots) #cmap = cm.RdYlGn, for surface plotting\n","  plot.set_title('%s(K, T) Plot' % greek, color = color_plots,fontsize = title_size)\n","  plot.set_xlabel('Strike $K$', color = color_plots, fontsize = xlabel_size)\n","  plot.set_ylabel('Maturity $T$', color = color_plots, fontsize = ylabel_size)\n","  plot.set_zlabel('%s(K, T)' % greek, color = color_plots)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YT0zfuDsJzON","colab_type":"text"},"source":["## **Parameters**"]},{"cell_type":"code","metadata":{"id":"054ybKFpJoon","colab_type":"code","colab":{}},"source":["# Initial Underlying Price\n","S0 = 100#@param {type:\"number\"}\n","\n","# Risk-free rate (also known as the drift coefficient)\n","r = 0.15#@param {type:\"number\"}\n","\n","# Dividend Yield Rate\n","q = 0.0#@param {type:\"number\"}\n","\n","# Valuation Date\n","t = 0.0#@param {type:\"number\"}\n","\n","# Maturity\n","T = 1.0#@param {type:\"number\"}\n","\n","# Strike\n","K = 95#@param {type:\"number\"}\n","\n","# Volatility (also known as the diffusion coefficient)\n","sigma = 0.3#@param {type:\"number\"}\n","\n","# Number of Iterations for Monte Carlo Simulation\n","iterations = 10000#@param {type:\"integer\"}\n","\n","# Time Steps\n","timesteps = 10000#@param {type:\"integer\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9HcItrRWzr-z","colab_type":"text"},"source":["## **Error Estimation**"]},{"cell_type":"markdown","metadata":{"id":"GnRDaSeCkkOI","colab_type":"text"},"source":["### Black-Scholes vs. Monte Carlo: Call Options with Geometric Average"]},{"cell_type":"code","metadata":{"id":"lTzgsDfaZMSQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":368},"outputId":"d49fd4ce-818f-429f-a05a-746563994ea4","executionInfo":{"status":"error","timestamp":1587405172897,"user_tz":240,"elapsed":3094,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["print('- - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  bs = bsm_call(S0, i, T, t, r, q, sigma)\n","  mc = mc_call_geom(S0, i, T, t, r, q, sigma,iterations,timesteps)\n","  error = np.abs((bs-mc)/bs)*100\n","  print('G_c(K=%d,T=%d):'%(i,T))\n","  print('Black-Scholes:',bs)\n","  print('Monte Carlo:', mc)\n","  print('Error: %f%%' % error)\n","  print('- - - - - - - - - - - - - - - - -')"],"execution_count":22,"outputs":[{"output_type":"stream","text":["- - - - - - - - - - - - - - - - -\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-16ae5d1f4b1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m95\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m110\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mbs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbsm_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0mmc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmc_call_geom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0miterations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtimesteps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbs\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mmc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mbs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'G_c(K=%d,T=%d):'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-62b7460aa9d4>\u001b[0m in \u001b[0;36mmc_call_geom\u001b[0;34m(S0, K, T, t, r, q, sigma, iterations, timesteps)\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mmc_call_geom_payoffs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0miterations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgbm_paths\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimesteps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mS_geom_mu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mmc_call_geom_payoffs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mr\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS_geom_mu\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: gbm_paths() takes 8 positional arguments but 9 were given"]}]},{"cell_type":"markdown","metadata":{"id":"cveiRvp9k6of","colab_type":"text"},"source":["### Black-Scholes vs. Monte Carlo: Put Options with Geometric Average"]},{"cell_type":"code","metadata":{"id":"SLuAHSPaw4WU","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  bs = bsm_put(S0,i,T,t,r,q,sigma)\n","  mc = mc_put_geom(S0, i, T, t, r, q, sigma,iterations,timesteps)\n","  error = np.abs((bs-mc)/bs)*100\n","  print('G_p(K=%d,T=%d):'%(i,T))\n","  print('Black-Scholes:',repr(bs))\n","  print('Monte Carlo:',repr(mc))\n","  print('Error:',repr(error),'%')\n","  print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7w1N-UPPGLzu","colab_type":"text"},"source":["### Asian call options with Arithmetic Average: Linetsky Test Cases\n"]},{"cell_type":"markdown","metadata":{"id":"MXyI1G42H0rh","colab_type":"text"},"source":["The arithmetic average option pricer is benchmarked against the test cases in Table B of the Linetsky paper 1 *Exotic spectra, Risk magazine, April 2002. V. Linetsky* (reproduced below):\n","\n","**%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%**\n","\n","**C &emsp; r &emsp; &emsp; &emsp; σ &emsp; &emsp; T &emsp; S0 &emsp; EE &emsp; &emsp; &emsp; MC &emsp; &emsp; &emsp; &emsp; &emsp; %Err**\n","\n","1 &emsp; 0.0200 &emsp; 0.10 &emsp; 1 &emsp; 2.0 &emsp; 0.05602 &emsp; 0.0559860415 &emsp; 0.017\n","\n","2 &emsp; 0.1800 &emsp; 0.30 &emsp; 1 &emsp; 2.0 &emsp; 0.21850 &emsp; 0.2183875466 &emsp; 0.059\n","\n","3 &emsp; 0.0125 &emsp; 0.25 &emsp; 2 &emsp; 2.0 &emsp; 0.17250 &emsp; 0.1722687410 &emsp; 0.063\n","\n","4 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 1.9 &emsp; 0.19330 &emsp; 0.1931737903 &emsp; 0.084\n","\n","5 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 2.0 &emsp; 0.24650 &emsp; 0.2464156905 &emsp; 0.095\n","\n","6 &emsp; 0.0500 &emsp; 0.50 &emsp; 1 &emsp; 2.1 &emsp; 0.30640 &emsp; 0.3062203648 &emsp; 0.106\n","\n","7 &emsp; 0.0500 &emsp; 0.50 &emsp; 2 &emsp; 2.0 &emsp; 0.35030 &emsp; 0.3500952190 &emsp; 0.146\n","\n","**%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%**\n","\n","**Notes:**\n","* *(EE = Eigenfunction Expansion i.e. the Black-Scholes analytic result in \n","this algorithm; MC = Monte-Carlo estimate);*\n","* *All test cases have a strike K = 2.0 and a dividend yield q = 0.0;*"]},{"cell_type":"markdown","metadata":{"id":"ipqVRR53LQ6_","colab_type":"text"},"source":["#### Test Cases:"]},{"cell_type":"code","metadata":{"id":"hJHkIHokVnfA","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 1 Parameters:\n","# r = 0.02\n","# sigma = 0.1\n","# T = 1\n","# S0 = 2.0\n","\n","lntk1 = 0.0559860415\n","mc = mc_call_arithm(2.0, 2.0, 1, t, 0.02, q, 0.1,iterations,timesteps)\n","error = np.abs((lntk1-mc)/lntk1)*100\n","print('Case 1 (r=0.02, sigma=0.10, T=1, S0=2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk1))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lbEU9pWEx4nF","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 2 Parameters:\n","# r = 0.18\n","# sigma = 0.30\n","# T = 1.0\n","# S0 = 2.0\n","\n","lntk2 = 0.2183875466\n","mc = mc_call_arithm(2.0, 2.0, 1.0, t, 0.18, q, 0.3,iterations,timesteps)\n","error = np.abs((lntk2-mc)/lntk2)*100\n","print('Case 2 (r = 0.18, sigma = 0.30, T = 1, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk2))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vdvy2z-ux9-P","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 3 Parameters:\n","# r = 0.0125\n","# sigma = 0.25\n","# T = 2.0\n","# S0 = 2.0\n","\n","lntk3 = 0.1722687410\n","mc = mc_call_arithm(2.0, 2.0, 2.0, t, 0.0125, q, 0.25,iterations,timesteps)\n","error = np.abs((lntk3-mc)/lntk3)*100\n","print('Case 3 (r = 0.0125, sigma = 0.25, T = 2, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,2))\n","print('Linetsky:',repr(lntk3))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UzGStZi6yC7V","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 4 Parameters:\n","# r = 0.05\n","# sigma = 0.50\n","# T = 1.0\n","# S0 = 1.9\n","\n","lntk4 = 0.1931737903\n","mc = mc_call_arithm(1.9, 2.0, 1.0, t, 0.05, q, 0.50,iterations,timesteps)\n","error = np.abs((lntk4-mc)/lntk4)*100\n","print('Case 4 (r = 0.05, sigma = 0.50, T = 1, S0 = 1.9):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk4))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YHPuk2L3yD2Z","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 5 Parameters:\n","# r = 0.05\n","# sigma = 0.50\n","# T = 1.0\n","# S0 = 2.0\n","\n","lntk5 = 0.2464156905\n","mc = mc_call_arithm(2.0, 2.0, 1.0, t, 0.05, q, 0.50,iterations,timesteps)\n","error = np.abs((lntk5-mc)/lntk5)*100\n","print('Case 5 (r = 0.05, sigma = 0.50, T = 1, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk5))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vBnu71z7yK33","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 6 Parameters:\n","# r = 0.05\n","# sigma = 0.50\n","# T = 1.0\n","# S0 = 2.1\n","\n","lntk6 = 0.3062203648\n","mc = mc_call_arithm(2.1, 2.0, 1.0, t, 0.05, q, 0.50,iterations,timesteps)\n","error = np.abs((lntk6-mc)/lntk6)*100\n","print('Case 6 (r = 0.05, sigma = 0.50, T = 1, S0 = 2.1):')\n","print('G_c(K=%d,T=%d):'%(2.0,1))\n","print('Linetsky:',repr(lntk6))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eptexy9gyNl2","colab_type":"code","colab":{}},"source":["print('- - - - - - - - - - - - - - - - -')\n","# Test Case 7 Parameters:\n","# r = 0.05\n","# sigma = 0.50\n","# T = 2.0\n","# S0 = 2.0\n","\n","lntk7 = 0.3500952190\n","mc = mc_call_arithm(2.0, 2.0, 2.0, t, 0.05, q, 0.50, iterations,timesteps)\n","error = np.abs((lntk7-mc)/lntk7)*100\n","print('Case 7 (r = 0.05, sigma = 0.50, T = 2.0, S0 = 2.0):')\n","print('G_c(K=%d,T=%d):'%(2.0,2))\n","print('Linetsky:',repr(lntk7))\n","print('Monte Carlo:',repr(mc))\n","print('Error:',repr(error),'%')\n","\n","print('- - - - - - - - - - - - - - - - -')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T1s5HjiAzytF","colab_type":"text"},"source":["### Monte Carlo vs. Number of Simulations"]},{"cell_type":"markdown","metadata":{"id":"yeoXbvpMz_lk","colab_type":"text"},"source":["The results of 1000,5000,10000,50000,100000,500000,1000000, and 5000000 iterations are compared to the Black-Scholes theoretical price. The errors are then log-plotted against the number of iterations in order to determine the sensitivity of the pricing algorithm to the number of iterations."]},{"cell_type":"code","metadata":{"id":"Llfmlvyx2J1W","colab_type":"code","colab":{}},"source":["it_cases = [5000,10000,50000]\n","\n","# Call Options:\n","bsm_c = bsm_call(S0, K, T, t, r, q, sigma)\n","print('The Black-Scholes Theoretical Call Price is:',bsm_c)\n","errors_c = []\n","\n","for i in range(0,len(it_cases)):\n","  seed = np.random.randint(1,500)\n","  mc_c = mc_call_geom(S0, K, T, t, r, q, sigma,it_cases[i],timesteps)\n","  print('For %d iterations, the Monte Carlo Call Price estimate is:' %it_cases[i],mc_c)\n","  error_c = 100 * (np.abs(mc_c-bsm_c)/bsm_c)\n","  errors_c.append(error)\n","print(errors_c)\n","\n","# Errors v. Simulations Log-Plot:\n","errors_v_runs = plt.figure()\n","ax = errors_v_runs.add_subplot(111)\n","ax.set_xscale(\"log\")\n","ax.set_yscale(\"log\")\n","ax.set_title(\"Errors vs. Simulations (Call)\")\n","ax.plot(it_cases, errors_c, \"o-\")\n","print(errors_c)\n","\n","# Put Options:\n","bsm_p = bsm_put(S0, K, T, t, r, q, sigma)\n","print('The Black-Scholes Theoretical Put Price is:',bsm_p)\n","errors_p = []\n","\n","for i in range(0,len(it_cases)):\n","  seed = np.random.randint(1,500)\n","  mc_p = mc_put_geom(S0, K, T, t, r, q, sigma,it_cases[i],timesteps)\n","  print('For %d iterations, the Monte Carlo Put Price estimate is:' %it_cases[i],mc_p)\n","  error_p = 100 * (np.abs(mc_p-bsm_p)/bsm_p)\n","  errors_p.append(error_p)\n","print(errors_p)\n","\n","# Errors v. Simulations Log-Plot:\n","errors_v_runs = plt.figure()\n","ax = errors_v_runs.add_subplot(111)\n","ax.set_xscale(\"log\")\n","ax.set_yscale(\"log\")\n","ax.set_title(\"Errors vs. Simulations (Put)\")\n","ax.plot(it_cases, errors_p, \"o-\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q7Z4ybkZQCmg","colab_type":"code","colab":{}},"source":["def mc_call_geom_convergence(S0, K, T, t, r, q, sigma,iterations,timesteps):\n","  mc_call_geom_payoffs = []\n","  upper_list = []\n","  mean_list = []\n","  lower_list = []\n","  S_geom_mu = 0.0\n","  S_geom_sigma = 0.0\n","  for i in range(1,10000,10):\n","    S = gbm_paths(S0, K, T, t, r, q, sigma, timesteps)\n","    S_geom_mu = (S_geom_mu + np.exp(np.mean(np.log(S))))/i\n","    S_geom_sigma = S_geom_sigma + np.exp(np.std(np.log(S)))\n","    lower_list.append(S_geom_mu + (1.645 * S_geom_sigma / np.sqrt(i)))\n","    mean_list.append(S_geom_mu)\n","    upper_list.append(S_geom_mu - (1.645 * S_geom_sigma / np.sqrt(i)))\n","  return lower_list, mean_list, upper_list\n","\n","results = mc_call_geom_convergence(S0, K, T, t, r, q, sigma,iterations,timesteps)\n","lower_list = results[0]\n","mean_list = results[1]\n","upper_list = results[2]\n","# upper_list.append(mean + (1.96 * std / np.sqrt(i)))\n","plt.plot(lower_list, color = 'red')\n","#plt.plot(mean_list, color = 'black')\n","plt.plot(upper_list, color = 'green')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SQ6-Hxx5gwSx","colab_type":"text"},"source":["### Monte Carlo vs. Number of Timesteps"]},{"cell_type":"markdown","metadata":{"id":"REwP55KjiMZy","colab_type":"text"},"source":["The results of 1000,5000,10000,50000,100000,500000,1000000, and 5000000 timesteps are compared to the Black-Scholes theoretical price. The errors are then log-plotted against the number of timesteps in order to determine the sensitivity of the pricing algorithm to the number of timesteps."]},{"cell_type":"code","metadata":{"id":"Iwq7Lw81g7Aa","colab_type":"code","colab":{}},"source":["n_cases = [5000,10000,50000]\n","\n","# Call Options:\n","bsm_c = bsm_call(S0, K, T, t, r, q, sigma)\n","print('The Black-Scholes Theoretical Call Price is:',bsm_c)\n","errors_c = []\n","\n","for i in range(0,len(n_cases)):\n","  seed = np.random.randint(1,500)\n","  mc_c = mc_call_geom(S0, K, T, t, r, q, sigma,iterations,n_cases[i])\n","  print('For %d iterations, the Monte Carlo Call Price estimate is:' %n_cases[i],mc_c)\n","  error_c = 100 * (np.abs(mc_c-bsm_c)/bsm_c)\n","  errors_c.append(error)\n","\n","print(errors_c)\n","\n","# Errors v. Timesteps Log-Plot:\n","errors_v_runs = plt.figure()\n","ax = errors_v_runs.add_subplot(111)\n","ax.set_xscale(\"log\")\n","ax.set_yscale(\"log\")\n","ax.set_title(\"Errors vs. Simulations (Call)\")\n","ax.plot(n_cases, errors_c, \"o-\")\n","\n","\n","# Put Options:\n","bsm_p = bsm_put(S0, K, T, t, r, q, sigma)\n","print('The Black-Scholes Theoretical Put Price is:',bsm_p)\n","errors_p = []\n","\n","for i in range(0,len(n_cases)):\n","  seed = np.random.randint(1,500)\n","  mc_p = mc_put_geom(S0, K, T, t, r, q, sigma,iterations,n_cases[i])\n","  print('For %d iterations, the Monte Carlo Put Price estimate is:' %n_cases[i],mc_p)\n","  error_p = 100 * (np.abs(mc_p-bsm_p)/bsm_p)\n","  errors_p.append(error_p)\n","\n","print(errors_p)\n","\n","# Errors v. Timesteps Log-Plot:\n","errors_v_runs = plt.figure()\n","ax = errors_v_runs.add_subplot(111)\n","ax.set_xscale(\"log\")\n","ax.set_yscale(\"log\")\n","ax.set_title(\"Errors vs. Simulations (Put)\")\n","ax.plot(n_cases, errors_p, \"o-\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ew6DgFv1Y66g","colab_type":"text"},"source":["## **Hedging Test**"]},{"cell_type":"markdown","metadata":{"id":"T3OoH0xmXYMj","colab_type":"text"},"source":["### Daily Data Generation"]},{"cell_type":"code","metadata":{"id":"4qI4ISBrXXDp","colab_type":"code","colab":{}},"source":["data_generator = tf_gbm_paths()\n","prices = [100,110,150,250,150,100,230,120,210,150]\n","daily_data = np.ones((10,timesteps))\n","S_geometric = np.ones((10,1))\n","payoffs = np.ones((10,1))\n","for i in range(0,10):\n","  seed = np.random.randint(1,5000)\n","  daily_data[i] = data_generator(prices[i],95,1.0,0.15,0.3,seed,1,timesteps)\n","  S_geometric[i] = np.exp(np.mean(np.log(daily_data[i,:])))\n","  payoffs[i] = np.exp(-r * T) * max(S_geometric[i] - K, 0)\n","\n","plt.figure(figsize=(width,height))\n","_= plt.plot(np.transpose(daily_data))\n","_ = plt.title('Simulated Stock Prices',fontsize=title_size,color = color_plots)\n","_ = plt.ylabel('Price',fontsize=ylabel_size,color = color_plots)\n","_ = plt.xlabel('Time Step',fontsize=xlabel_size,color = color_plots)\n","\n","plt.figure(figsize=(width,height))\n","_= plt.plot(payoffs)\n","_ = plt.title('Payouts',fontsize=title_size,color = color_plots)\n","_ = plt.ylabel('Price',fontsize=ylabel_size,color = color_plots)\n","_ = plt.xlabel('Time Step',fontsize=xlabel_size,color = color_plots)\n","\n","print(payoffs)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6USYxGgCeSuv","colab_type":"text"},"source":["### Portfolio Sensitivity"]},{"cell_type":"markdown","metadata":{"id":"GsIRT2iqngVl","colab_type":"text"},"source":["#### BSM (Control)"]},{"cell_type":"code","metadata":{"id":"4ACYH7b9eVyT","colab_type":"code","colab":{}},"source":["#BSM Prices:\n","for i in range(0,len(prices)):\n","  bsm_plot_values(bsm_call,prices[i])\n","\n","for i in range(0,len(prices)):\n","  bsm_plot_values(bsm_put,prices[i])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pC2rfhGhnk4r","colab_type":"text"},"source":["#### Monte Carlo"]},{"cell_type":"code","metadata":{"id":"FGbUDe5AnAot","colab_type":"code","colab":{}},"source":["#Monte Carlo Prices:\n","for i in range(0,len(prices)):\n","  mc_plot_values(mc_call_geom,prices[i])\n","\n","for i in range(0,len(prices)):\n","  mc_plot_values(bsm_put,prices[i])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DPJnbYa-d6eC","colab_type":"text"},"source":["### Estimate Greeks"]},{"cell_type":"markdown","metadata":{"id":"GLzU35BtnrTS","colab_type":"text"},"source":["#### BSM (Control)"]},{"cell_type":"code","metadata":{"id":"t4pAROSpd-F2","colab_type":"code","colab":{}},"source":["plot_greeks_bsm(bsm_delta, 'Delta')\n","plot_greeks_bsm(bsm_gamma, 'Gamma')\n","plot_greeks_bsm(bsm_theta, 'Theta')\n","plot_greeks_bsm(bsm_rho, 'Rho')\n","plot_greeks_bsm(bsm_vega, 'Vega')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FvN0LR1Onu-4","colab_type":"text"},"source":["#### Monte Carlo"]},{"cell_type":"code","metadata":{"id":"jRIsYJPdnxae","colab_type":"code","colab":{}},"source":["plot_greeks_mc(mc_delta, 'Delta')\n","plot_greeks_mc(mc_gamma, 'Gamma')\n","plot_greeks_mc(mc_theta, 'Theta')\n","plot_greeks_mc(mc_rho, 'Rho')\n","plot_greeks_mc(mc_vega, 'Vega')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jmOo-cqLokSx","colab_type":"text"},"source":["### Hedged-Unhedged Portfolio Variability (TODO)"]}]}