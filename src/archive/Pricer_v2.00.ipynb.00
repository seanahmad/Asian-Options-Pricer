{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Asian_Options_Pricer_v2","provenance":[],"authorship_tag":"ABX9TyNhEALIQhWDxaKfyNtyVzwk"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"QELjyY3uOpi2","colab_type":"code","colab":{}},"source":["############### Packages ###############\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy.stats import norm\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P03-ECo45K41","colab_type":"code","colab":{}},"source":["############### Constants ###############\n","\n","r = 0.18\n","sigma = 0.3\n","T = 1\n","K = 2.0\n","S0 = 2.0\n","iterations = 1000000"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"H6cp0XhwwIsC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":459},"outputId":"0d28b566-408a-4835-dd4f-8ab1a2463a92","executionInfo":{"status":"ok","timestamp":1584589494998,"user_tz":240,"elapsed":2194,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["############### Difference X-Y ###############\n","\n","def difference(iterations = 10000000, K = 90, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    \n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","\n","    difference=arithmetic_sampling-geometric_sampling\n","    std = np.std(difference)\n","    mean = np.mean(difference)\n","    mean+(1.96*std/np.sqrt(iterations)), mean, mean-(1.96*std/np.sqrt(iterations))\n","    return  arithmetic_call[0], np.mean(geometric_sampling), mean\n","\n","\n","def difference_std(iterations = 100000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    print(times)\n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","    \n","    difference = arithmetic_sampling-geometric_sampling\n","    std_ari = []\n","    std_diff = []\n","    for i in range(1, iterations, 100):\n","        std_ari.append((1.96*np.std(arithmetic_sampling[:i])/np.sqrt(i)))\n","        std_diff.append((1.96*np.std(difference[:i])/np.sqrt(i)))\n","    std_diff = ((1.96*np.std(difference)/np.sqrt(iterations)))\n","    std_ari = (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))\n","    return std_ari, std_diff\n","\n","\n","difference_std(iterations = 100000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[0.00666667 0.01333333 0.02       0.02666667 0.03333333 0.04\n"," 0.04666667 0.05333333 0.06       0.06666667 0.07333333 0.08\n"," 0.08666667 0.09333333 0.1        0.10666667 0.11333333 0.12\n"," 0.12666667 0.13333333 0.14       0.14666667 0.15333333 0.16\n"," 0.16666667 0.17333333 0.18       0.18666667 0.19333333 0.2\n"," 0.20666667 0.21333333 0.22       0.22666667 0.23333333 0.24\n"," 0.24666667 0.25333333 0.26       0.26666667 0.27333333 0.28\n"," 0.28666667 0.29333333 0.3        0.30666667 0.31333333 0.32\n"," 0.32666667 0.33333333 0.34       0.34666667 0.35333333 0.36\n"," 0.36666667 0.37333333 0.38       0.38666667 0.39333333 0.4\n"," 0.40666667 0.41333333 0.42       0.42666667 0.43333333 0.44\n"," 0.44666667 0.45333333 0.46       0.46666667 0.47333333 0.48\n"," 0.48666667 0.49333333 0.5        0.50666667 0.51333333 0.52\n"," 0.52666667 0.53333333 0.54       0.54666667 0.55333333 0.56\n"," 0.56666667 0.57333333 0.58       0.58666667 0.59333333 0.6\n"," 0.60666667 0.61333333 0.62       0.62666667 0.63333333 0.64\n"," 0.64666667 0.65333333 0.66       0.66666667 0.67333333 0.68\n"," 0.68666667 0.69333333 0.7        0.70666667 0.71333333 0.72\n"," 0.72666667 0.73333333 0.74       0.74666667 0.75333333 0.76\n"," 0.76666667 0.77333333 0.78       0.78666667 0.79333333 0.8\n"," 0.80666667 0.81333333 0.82       0.82666667 0.83333333 0.84\n"," 0.84666667 0.85333333 0.86       0.86666667 0.87333333 0.88\n"," 0.88666667 0.89333333 0.9        0.90666667 0.91333333 0.92\n"," 0.92666667 0.93333333 0.94       0.94666667 0.95333333 0.96\n"," 0.96666667 0.97333333 0.98       0.98666667 0.99333333 1.        ]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(0.0596409384873847, 0.005431996773865623)"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"4cmcrHthwLwy","colab_type":"code","colab":{}},"source":["############### Elapsed Time Calculator ###############\n","\n","def Monte_Carlo_Arithmetic(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","\n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    lower_list = []\n","    upper_list = []\n","    mean_list = []\n","    for i in range(1, iterations, 100):\n","         std = np.std(arithmetic_sampling[:i])\n","         mean = np.mean(arithmetic_sampling[:i])\n","         mean_list.append(mean)\n","         upper_list.append(mean+(1.96*std/np.sqrt(i)))\n","         lower_list.append(mean-(1.96*std/np.sqrt(i)))\n","    mean_list = np.mean(arithmetic_sampling)\n","    std_ari = (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))\n","    return mean_list+std_ari, mean_list, mean_list-std_ari\n","\n","\n","def Monte_Carlo_diff(iterations = 100000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    \n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","    \n","    difference = arithmetic_sampling-geometric_sampling\n","    std_ari = []\n","    std_diff = []\n","    for i in range(1, iterations, 100):\n","         std_ari.append((1.96*np.std(arithmetic_sampling[:i])/np.sqrt(i)))\n","         std_diff.append((1.96*np.std(difference[:i])/np.sqrt(i)))\n","    std_diff = ((1.96*np.std(difference)/np.sqrt(iterations)))\n","    print(std_diff)\n","\n","\n","def timing_ari(it):\n","    start_time = time.time()\n","    Monte_Carlo_Arithmetic(iterations= it)\n","    elapsed_time = time.time() - start_time\n","    print('elapsed_time = ', elapsed_time)\n","\n","\n","def timing_diff(it):\n","    start_time = time.time()\n","    Monte_Carlo_diff(iterations= it)\n","    elapsed_time = time.time() - start_time\n","    print('elapsed_time = ', elapsed_time)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dnJktYdrwPCr","colab_type":"code","colab":{}},"source":["data_arithmetic = Monte_Carlo_Arithmetic(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3)\n","plt.plot(data_arithmetic[0])\n","plt.plot(data_arithmetic[1])\n","plt.plot(data_arithmetic[2])\n","plt.ylabel('Expected Value')\n","plt.xlabel('Iterations')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ja6wayRfwSv9","colab_type":"code","colab":{}},"source":["Monte_Carlo_diff(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.2)\n","#plt.plot(data_diff[0])\n","#plt.plot(data_diff[1])\n","#plt.plot(data_diff[2])\n","#plt.ylabel('Expected Value')\n","#plt.xlabel('Iterations')\n","#plt.show()"],"execution_count":0,"outputs":[]}]}