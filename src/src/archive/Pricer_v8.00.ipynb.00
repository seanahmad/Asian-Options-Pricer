{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pricer_v8.0","provenance":[{"file_id":"12hj33ZWQvkYdXCMyK_Nchokt8XWMWbEv","timestamp":1586665467758},{"file_id":"1g9xDGWCoKgFhNQWMW_nGfeJ8C1_5zaOE","timestamp":1586418388157},{"file_id":"1x8Yse6fcFTczP_PyKFdUmXdcuQAR_4_q","timestamp":1586191214807}],"collapsed_sections":["YhZoremvTakv","cveiRvp9k6of"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zY4InIR-t8Bp","colab_type":"text"},"source":["\n","# Asian Options Pricing & Hedging Tool\n","Course: FE 620: Pricing & Hedging | Stevens Institute of Technology\n","\n","Advisor: Dan Pirjol\n","\n","Group: Theo Dimitrasopoulos, Will Kraemer, Vaikunth Seshadri, Snehal Rajguru\n","\n","Link: https://colab.research.google.com/drive/1cImw6GuMlUYoXtHtEnyuP7lXsAlko2r6\n","\n","*Version: v8.0*"]},{"cell_type":"markdown","metadata":{"id":"nqNjBKHR8PDW","colab_type":"text"},"source":["## **Runtime comments:**\n","\n","* Click the execution button on the top left corner of each code cell to execute it. To run all cells in descending order, go to the menu bar at the top and click Runtime -> Run all (or use the **Ctrl-F9** or **âŒ˜-F9** hotkey for Windows and MacOSX respectively);\n","* If the code is running slowly, go to Runtime -> Change runtime type, and change the Runtime Shape to High-RAM from the dropdown menu;\n","* The **\"!pip install\"** lines under the Python packages section (i.e. lines 3-5) only need to be executed the first time you run the notebook. If you receive the message **\"Requirement already satisfied:\"**, wrap them in treble quotes (add the quotes in lines 2 & 6)*.\n","\n","## **Price comparisons:**\n","\n","### K = 95, T = 1: \n","* Black Scholes Call: G_c(95,1) = 12.508538481017892\n","* Monte Carlo Call:   G_c(95,1) = 10.44391708453897\n","* Black-Scholes Put:  G_p(95,1) = 2.194652455717922\n","* Monte Carlo Put:    G_p(95,1) = ***-10.153873266659327 (Error)***\n","\n","### K = 100, T = 1:\n","* Black Scholes Call: G_c(100,1) = 9.61215966961383\n","* Monte Carlo Call:   G_c(100,1) = 6.064498653478413\n","* Black-Scholes Put:  G_p(100,1) = 3.6018135264391438\n","* Monte Carlo Put:    G_p(100,1) = ***-5.884567397155704 (Error)***\n","\n","### K = 105, T = 1:\n","* Black-Scholes Call: G_c(105,1) = 7.185865725921304\n","* Monte Carlo Call:   G_c(100,1) = 1.6959212282257528\n","* Black-Scholes Put:  G_p(100,1) = 5.479059464871914\n","* Monte Carlo Put:    G_p(100,1) = ***-1.6191400968937268 (Error)***\n","\n","## **Questions for teammates:**\n","\n","* ### **Monte Carlo Puts all come out negative and approximately the same values as the Monte Carlo calls. Any ideas?**\n","* ### How can we increase the accuracy of the MC calls?\n"]},{"cell_type":"markdown","metadata":{"id":"d5l3s8YATLLE","colab_type":"text"},"source":["## Python Packages"]},{"cell_type":"code","metadata":{"id":"VRbkpjmc_DFg","colab_type":"code","colab":{}},"source":["# Install packages\n","\n","!pip install numpy\n","!pip install matplotlib\n","!pip install scipy\n","\n","\n","# Import Packages\n","import random\n","import numpy as np\n","from scipy.stats import norm\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"opyL41TtvItF","colab_type":"text"},"source":["## Inputs"]},{"cell_type":"markdown","metadata":{"id":"4WUxukopTRY7","colab_type":"text"},"source":["### Underlying Asset Variables\n","Insert the desired values in the form fields (right) or directly to the code (left):"]},{"cell_type":"code","metadata":{"id":"TnEggRnPnML3","colab_type":"code","cellView":"both","colab":{}},"source":["#@title Pricer Parameters:\n","\n","# Initial Underlying Price\n","S0 =  100 #@param {type:\"number\"}\n","\n","# Risk-free rate (also known as the drift coefficient)\n","r =  0.15#@param {type:\"number\"}\n","\n","# Dividend Yield Rate\n","q =  0.0 #@param {type:\"number\"}\n","\n","# Maturity\n","T =  1#@param {type:\"number\"}\n","\n","# Strike\n","K =  95#@param {type:\"number\"}\n","\n","# Volatility (also known as the diffusion coefficient)\n","sigma =  0.3 #@param {type:\"number\"}\n","\n","# Number of Iterations for Monte Carlo Simulation\n","it =  10#@param {type:\"integer\"}\n","\n","# Time Steps\n","N =  1000#@param {type:\"integer\"}\n","\n","# Risk-free rate\n","rf =  0.05 #@param {type:\"number\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rA02G58pTXXy","colab_type":"text"},"source":["## Plotting Parameters"]},{"cell_type":"markdown","metadata":{"id":"_CqW_QnbsFn_","colab_type":"text"},"source":["### Aesthetic Parameters"]},{"cell_type":"code","metadata":{"id":"gaVvMo9XadEl","colab_type":"code","colab":{}},"source":["#@title Element Sizes:\n","\n","# Universal Plot width\n","width = 25 #@param {type:\"integer\"}\n","\n","# Universal Plot height\n","height =  14#@param {type:\"integer\"}\n","\n","# Universal xtick size\n","xtick_size = 8 #@param {type:\"integer\"}\n","\n","# Universal ytick size\n","ytick_size =  8#@param {type:\"integer\"}\n","\n","# Universal title font size\n","title_size = 18 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","xlabel_size = 12 #@param {type:\"integer\"}\n","\n","# Universal xlabel font size\n","ylabel_size = 12 #@param {type:\"integer\"}\n","\n","# Universal legend font size\n","legend_size = 10 #@param {type:\"integer\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f8xVZjiTsJrg","colab_type":"text"},"source":["### Execute Parameters"]},{"cell_type":"code","metadata":{"id":"Zk2eSNqcjRf6","colab_type":"code","colab":{}},"source":["#Set parameters\n","plt.rcParams['figure.figsize'] = (width,height)\n","params = {'text.color' : 'black',\n","          'xtick.color' : 'w',\n","          'ytick.color' : 'w',\n","          'xtick.labelsize' : xtick_size,\n","          'ytick.labelsize' : ytick_size,\n","          'legend.loc' : 'upper left',\n","         }\n","plt.rcParams.update(params)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MgK4xV9LXb-E","colab_type":"text"},"source":["## Random seed generator"]},{"cell_type":"code","metadata":{"id":"f71F5xLsXhcU","colab_type":"code","colab":{}},"source":["rand = random.random()\n","print('The random seed is:',rand)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aFneK_QsvZnF","colab_type":"text"},"source":["## Definitions"]},{"cell_type":"markdown","metadata":{"id":"TT4Ldy_Zs0wZ","colab_type":"text"},"source":["### Brownian Path Generator"]},{"cell_type":"code","metadata":{"id":"KmMR6l_CszW4","colab_type":"code","colab":{}},"source":["def bm_paths(rand, N):\n","  rand = np.random.randint(np.random.uniform(1.0,300.0), np.random.uniform(301.0,1000.0))\n","  np.random.seed(rand)\n","  dt = 1. / N\n","  b_dt = np.random.normal(0., 1., N)*np.sqrt(dt)\n","  W = np.cumsum(b_dt)\n","  return W, b_dt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HojEL5VnmUzk","colab_type":"text"},"source":["### Geometric Brownian Path Generator (Iterative)"]},{"cell_type":"code","metadata":{"id":"MiVzAE6cmX5h","colab_type":"code","colab":{}},"source":["def gbm_paths_iterative(S0, r, sigma, T, N):      \n","  t = np.linspace(0.,1.,N+1)\n","  dt = 1. / N\n","  b_dt = np.random.normal(0., 1., N)*np.sqrt(dt)\n","  W = np.cumsum(b_dt)\n","  S = []\n","  S.append(S0)\n","  for i in range(1,N+1):\n","    S_i = S0 * np.exp((r - 0.5 * sigma**2) * t[i] + sigma * W[i-1])\n","    S.append(S_i)\n","  return S"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rbDVOtPwGLCd","colab_type":"text"},"source":["### Geometric Brownian Path Generator (Matrix Operations)"]},{"cell_type":"code","metadata":{"id":"NR2JccwqGNCM","colab_type":"code","colab":{}},"source":["def gbm_paths(r,q,N,T,S0,sigma):\n","  t = np.linspace(0.,1.,N)\n","  dt = T/N\n","  bt = np.random.normal(0., 1., int(N))*np.sqrt(dt)\n","  W = np.cumsum(bt)\n","  S_i = S0 * np.exp(sigma * W + (r - q - 0.5 * (sigma**2)) * t)\n","  return S_i"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YhZoremvTakv","colab_type":"text"},"source":["### Black-Scholes Theoretical Price Calculator"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"vD4W-eurxoPo","colab":{}},"source":["def bs_geometric_call(r,q,T,K,S0,sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * T)\n","  d2 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * T)\n","  c = np.exp(-r * T) * (G0 * norm.cdf(d1) - K * norm.cdf(d2))\n","  return c\n","\n","def bs_geometric_put(r,q,T,K,S0,sigma):\n","  G0 = S0 * np.exp(0.5 * (r - q) * T - ((sigma**2) * T)/12)\n","  Sigma_G = sigma/np.sqrt(3)\n","  d1 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) + 0.5 * (Sigma_G**2) * T)\n","  d2 = (1/(Sigma_G * np.sqrt(T))) * (np.log(G0/K) - 0.5 * (Sigma_G**2) * T)\n","  p = np.exp(-r * T) * (K * norm.cdf(-d2) - G0 * norm.cdf(-d1))\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b1Fu5swGul_x","colab_type":"text"},"source":["### Monte Carlo Simulator (DEPRECATED)"]},{"cell_type":"code","metadata":{"id":"8M-qanBzIRBy","colab_type":"code","colab":{}},"source":["'''\n","# Monte Carlo simulator for Call Options:\n","def mc_call(it,r,q,T,K,N,S0,sigma):      \n","  t = np.linspace(0.,1.,N)\n","  dt = 1. / N\n","  payoffs = []\n","  drift = r - 0.5*sigma**2\n","  for i in range(1,it):\n","    b_dt = np.random.normal(0., 1., N)*np.sqrt(dt)\n","    W = np.cumsum(b_dt)\n","    S = []\n","    S.append(S0)\n","    plt.plot(W)\n","    for j in range(1,N):\n","      S_j = S0 * np.exp(drift * t[i] + sigma * W[j-1])\n","      S.append(S_j)\n","    S_geom = np.exp(1/it*np.sum(np.log(S)))\n","    payoffs.append(np.max(S_geom - K,0))\n","  c = np.exp(-r * T)*np.mean(payoffs)\n","  return c, payoffs\n","    \n","# Monte Carlo simulator for Put Options:\n","def mc_geometric_put(it,r,q,T,K,N,S0,sigma):      \n","  t = np.linspace(0.,1.,N)\n","  dt = 1./N\n","  payoffs = []\n","  drift = r - 0.5*sigma**2\n","  for i in range(1,it):\n","    b_dt = np.random.normal(0., 1., N)*np.sqrt(dt)\n","    W = np.cumsum(b_dt)\n","    S = []\n","    S.append(S0)\n","    for j in range(1,N):\n","      S_j = S0 * np.exp(drift * t[i] + sigma * W[j-1])\n","      S.append(S_j)\n","    S_geom = np.exp(1/N*np.sum(np.log(S)))\n","    payoffs.append(np.max(K - S_geom,0))\n","  p = np.exp(-r * T)*np.mean(payoffs)\n","  return p, payoffs\n","'''"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OMdz05wy3gLv","colab_type":"code","colab":{}},"source":["# Monte Carlo simulator for Call Options:\n","def mc_call(it,r,q,T,K,N,S0,sigma):\n","  payoffs = []\n","  S = []\n","  S.append(S0)\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_geom = np.exp(np.mean(np.log(S)))\n","    payoffs.append(max(S_geom - K, 0))\n","  c = np.exp(-r * T)*np.mean(payoffs)\n","  return c\n","\n","# Monte Carlo simulator for Call Options:\n","def mc_put(it,r,q,T,K,N,S0,sigma):\n","  payoffs = []\n","  S = []\n","  S.append(S0)\n","  for i in range(1,it):\n","    S = gbm_paths(r,q,N,T,S0,sigma)\n","    S_geom = np.exp(np.mean(np.log(S)))\n","    payoffs.append(max(K - S_geom, 0))\n","  p = np.exp(-r * T)*np.mean(payoffs)\n","  return p"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m2-fL7VqTx2k","colab_type":"text"},"source":["## Performance Tests"]},{"cell_type":"markdown","metadata":{"id":"GnRDaSeCkkOI","colab_type":"text"},"source":["### Black-Scholes Call"]},{"cell_type":"code","metadata":{"id":"lTzgsDfaZMSQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"15152b25-c462-4dbe-b83e-c1662cd0fa8d","executionInfo":{"status":"ok","timestamp":1586673490982,"user_tz":240,"elapsed":262,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  print('The Black-Scholes geometric price of a Call Option with strike K = %d and maturity T=%d is: G_c(%d,%d)=' %(i,T,i,T), bs_geometric_call(r,q,T,i,S0,sigma))\n","\n","print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')"],"execution_count":135,"outputs":[{"output_type":"stream","text":["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","The Black-Scholes geometric price of a Call Option with strike K = 95 and maturity T=1 is: G_c(95,1)= 12.508538481017892\n","The Black-Scholes geometric price of a Call Option with strike K = 100 and maturity T=1 is: G_c(100,1)= 9.61215966961383\n","The Black-Scholes geometric price of a Call Option with strike K = 105 and maturity T=1 is: G_c(105,1)= 7.185865725921304\n","- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8bGS1B2Rkoxm","colab_type":"text"},"source":["### Black-Scholes Put"]},{"cell_type":"code","metadata":{"id":"RpP9yjwAktWX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"c2bf2068-7c4a-44ca-c145-16c48d026b49","executionInfo":{"status":"ok","timestamp":1586673521665,"user_tz":240,"elapsed":286,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  print('The Black-Scholes geometric price of a Put Option with strike K = %d and maturity T=%d is: G_p(%d,%d)=' %(i,T,i,T), bs_geometric_put(r,q,T,i,S0,sigma))\n","\n","print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')"],"execution_count":139,"outputs":[{"output_type":"stream","text":["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","The Black-Scholes geometric price of a Put Option with strike K = 95 and maturity T=1 is: G_p(95,1)= 2.194652455717922\n","The Black-Scholes geometric price of a Put Option with strike K = 100 and maturity T=1 is: G_p(100,1)= 3.6018135264391438\n","The Black-Scholes geometric price of a Put Option with strike K = 105 and maturity T=1 is: G_p(105,1)= 5.479059464871914\n","- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IZO2udnuk3ye","colab_type":"text"},"source":["### Monte Carlo Call"]},{"cell_type":"code","metadata":{"id":"-Au71LWEwu9h","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":368},"outputId":"f9a03eb3-1287-4d94-fa7e-754e5e6d1e50","executionInfo":{"status":"error","timestamp":1586673606515,"user_tz":240,"elapsed":252,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n","\n","for i in range(95,110,5):\n","  print('The Monte Carlo geometric price of a Call Option with strike K = %d and maturity T=%d is: G_c(%d,%d)=' %(i,T,i,T), mc_call(it,r,q,T,i,N,S0,sigma))\n","\n","print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')"],"execution_count":145,"outputs":[{"output_type":"stream","text":["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-145-b3e1c6af52e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m95\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m110\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The Monte Carlo geometric price of a Call Option with strike K = %d and maturity T=%d is: G_c(%d,%d)='\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmc_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-144-b2779a52183f>\u001b[0m in \u001b[0;36mmc_call\u001b[0;34m(it, r, q, T, K, N, S0, sigma)\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgbm_paths\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mS0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mS_geom\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mpayoffs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS_geom\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'gbm_paths' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"cveiRvp9k6of","colab_type":"text"},"source":["### Monte Carlo Put"]},{"cell_type":"code","metadata":{"id":"SLuAHSPaw4WU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"f3f83a5e-a6ba-424f-ebeb-e9bcddcab982","executionInfo":{"status":"ok","timestamp":1586668875420,"user_tz":240,"elapsed":1636272,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}}},"source":["print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n","# Monte Carlo Simulator for Put Options:\n","\n","for i in range(95,110,5):\n","  print('The Monte Carlo geometric price of a Put Option with strike K = %d and maturity T=%d is: G_p(%d,%d)=' %(i,T,i,T), mc_geometric_put(it,r,q,T,i,N,S0,sigma)[0])\n","\n","print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')"],"execution_count":43,"outputs":[{"output_type":"stream","text":["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","The Monte Carlo geometric price of a Put Option with strike K = 95 and maturity T=1 is: G_p(95,1)= -10.153873266659327\n","The Monte Carlo geometric price of a Put Option with strike K = 100 and maturity T=1 is: G_p(100,1)= -5.884567397155704\n","The Monte Carlo geometric price of a Put Option with strike K = 105 and maturity T=1 is: G_p(105,1)= -1.6191400968937268\n","- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"],"name":"stdout"}]}]}