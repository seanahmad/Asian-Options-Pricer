{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Asian_Options_Pricer_v1","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"QELjyY3uOpi2","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy.stats import norm\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PcV5KSMJr4Go","colab_type":"code","colab":{}},"source":["############### Constants ###############\n","\n","r = 0.1\n","sigma = 0.3\n","T = 1\n","K = 90\n","S0 = 100"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GgXOSte0r2Ci","colab_type":"code","colab":{}},"source":["############### Pricing Formulas ###############\n","\n","def arithmeticExactPricing(r,T,K,S0,sigma):\n","    d1 = (np.log(S0/K) + (r + (sigma**2)/2)*T)/(sigma*np.sqrt(T))\n","    d2 = d1 - sigma*np.sqrt(T)\n","    return S0*norm.cdf(d1) - K * np.exp(-r*T)* norm.cdf(d2)\n","\n","\n","def geometricExactPricing(r,T,K,S0,sigma):\n","    d1 = (np.log(S0/K) + (r+(sigma**2)/6)*T/2)/(sigma*np.sqrt(T/3))\n","    d2 = (np.log(S0/K) + (r-(sigma**2)/2)*T/2)/(sigma*np.sqrt(T/3))\n","    return S0*np.exp(-(r + (sigma**2)/6)*T/2) * norm.cdf(d1) - K * np.exp(-r*T)* norm.cdf(d2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2su2kKuHryzu","colab_type":"code","colab":{}},"source":["############### Calculate the expected value of the lognormal distribution ###############\n","\n","def expectedval(r = 0.1, sigma = 0.3, T = 1, S0 = 100):\n","    return ((np.exp(r*T)-1)*S0)/(r*T)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ExR-Z25rxO2","colab_type":"code","colab":{}},"source":["############### Calculate the variance of the lognormal distribution ###############\n","\n","def variance(r = 0.1, sigma = 0.3, T = 1, S0 = 100):\n","    temp1 = (2*S0**2/((T**2)*(r+sigma**2)))\n","    temp2 = (np.exp((2*r+sigma**2)*T)-1)/(2*r+sigma**2)\n","    temp3 = (np.exp(r*T)-1)/r\n","    temp = temp1 * (temp2 - temp3)\n","    return temp - (((np.exp(r*T)-1)*S0)/(r*T))**2\n","\n","\n","def ecarttype(r = 0.1, sigma = 0.3, T = 1, S0 = 100):\n","    return np.sqrt(variance(r, sigma, T, S0))\n","\n","\n","esp = expectedval()\n","var = variance()\n","EC = ecarttype()\n","\n","mulog = np.log(esp**2/np.sqrt(var + esp**2))\n","sigmalog = np.sqrt(np.log(1 + (var/(esp**2))))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zcINKoffrvTP","colab_type":"code","colab":{}},"source":["############### Monte Carlo Simulation ###############\n","\n","def Monte_Carlo_lognormal(iterations = 1000000, K = 110, T = 1, r = 0.1):\n","    lognorm = np.random.lognormal(mulog, sigmalog, iterations)\n","    Price = np.exp(-r*T) * np.maximum(lognorm - K, 0)\n","    std = np.std(Price)\n","    mean = np.mean(Price)\n","    return mean+(1.96*std/np.sqrt(iterations)), mean, mean-(1.96*std/np.sqrt(iterations))\n","\n","\n","def Monte_Carlo_lognormal_it(iterations = 1000000, K = 110, T = 1, r = 0.1):\n","    lognorm = np.random.lognormal(mulog, sigmalog, iterations)\n","    Price = np.exp(-r*T) * np.maximum(lognorm - K, 0)\n","    lower_list = []\n","    upper_list = []\n","    mean_list = []\n","    for i in range(1, iterations, 100):\n","        std = np.std(Price[:i])\n","        mean = np.mean(Price[:i])\n","        mean_list.append(mean)\n","        upper_list.append(mean+(1.96*std/np.sqrt(i)))\n","        lower_list.append(mean-(1.96*std/np.sqrt(i)))\n","    return upper_list, mean_list, lower_list"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aRN0xGn-rtEO","colab_type":"code","colab":{}},"source":["############### Difference X-Y ###############\n","\n","def difference(iterations = 10000000, K = 90, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    \n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","\n","    difference=arithmetic_sampling-geometric_sampling\n","    std = np.std(difference)\n","    mean = np.mean(difference)\n","    mean+(1.96*std/np.sqrt(iterations)), mean, mean-(1.96*std/np.sqrt(iterations))\n","    return  arithmetic_call[0], np.mean(geometric_sampling), mean\n","\n","\n","def difference_std(iterations = 100000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    \n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","    \n","    difference = arithmetic_sampling-geometric_sampling\n","    std_ari = []\n","    std_diff = []\n","    for i in range(1, iterations, 100):\n","        std_ari.append((1.96*np.std(arithmetic_sampling[:i])/np.sqrt(i)))\n","        std_diff.append((1.96*np.std(difference[:i])/np.sqrt(i)))\n","    std_diff = ((1.96*np.std(difference)/np.sqrt(iterations)))\n","    std_ari = (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))\n","    return std_ari, std_diff"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LeP8B08SrrAI","colab_type":"code","colab":{}},"source":["############### Elapsed Time Calculator ###############\n","\n","def Monte_Carlo_Arithmetic(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","\n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    lower_list = []\n","    upper_list = []\n","    mean_list = []\n","    for i in range(1, iterations, 100):\n","         std = np.std(arithmetic_sampling[:i])\n","         mean = np.mean(arithmetic_sampling[:i])\n","         mean_list.append(mean)\n","         upper_list.append(mean+(1.96*std/np.sqrt(i)))\n","         lower_list.append(mean-(1.96*std/np.sqrt(i)))\n","    mean_list = np.mean(arithmetic_sampling)\n","    std_ari = (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))\n","    return mean_list+std_ari, mean_list, mean_list-std_ari\n","\n","\n","def Monte_Carlo_diff(iterations = 100000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3):\n","        \n","    # Generate N*iterations gaussian samples of variance T/N\n","    times=(T/N)*np.arange(1,N+1)\n","    increase=np.random.normal(0,np.sqrt(T/N),(N, iterations))\n","    brownian=np.dot(np.tril(np.ones((N,N))),increase)\n","    \n","    # Arithmetic average call\n","    St=S0*np.exp(sigma*np.transpose(brownian)+(r-sigma**2/2)*times)\n","\n","    arithmetic_sampling=np.exp(-r*T)*np.maximum(np.mean(St, axis = 1)-K,0)\n","    arithmetic_call= [np.mean(arithmetic_sampling), (1.96*np.std(arithmetic_sampling)/np.sqrt(iterations))]\n","    # Geometric average call\n","    geometric_sampling=np.exp(-r*T)*np.maximum(S0*np.exp(sigma*np.mean(brownian,axis = 0)+(r-(sigma**2)/2)*(T/2))-K,0)\n","    \n","    difference = arithmetic_sampling-geometric_sampling\n","    std_ari = []\n","    std_diff = []\n","    for i in range(1, iterations, 100):\n","         std_ari.append((1.96*np.std(arithmetic_sampling[:i])/np.sqrt(i)))\n","         std_diff.append((1.96*np.std(difference[:i])/np.sqrt(i)))\n","    std_diff = ((1.96*np.std(difference)/np.sqrt(iterations)))\n","    print(std_diff)\n","\n","\n","def timing_ari(it):\n","    start_time = time.time()\n","    Monte_Carlo_Arithmetic(iterations= it)\n","    elapsed_time = time.time() - start_time\n","    print('elapsed_time = ', elapsed_time)\n","\n","\n","def timing_diff(it):\n","    start_time = time.time()\n","    Monte_Carlo_diff(iterations= it)\n","    elapsed_time = time.time() - start_time\n","    print('elapsed_time = ', elapsed_time)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"z71dcdJx8L3P","colab_type":"code","outputId":"bf7de1ec-137d-4d6f-b282-986a7c6fd71d","executionInfo":{"status":"ok","timestamp":1584070422835,"user_tz":240,"elapsed":15165,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}},"colab":{"base_uri":"https://localhost:8080/","height":279}},"source":["data_lognormal = Monte_Carlo_lognormal_it(iterations = 1000000, K = 110, T = 1, r = 0.1)\n","plt.plot(data_lognormal[0])\n","plt.plot(data_lognormal[1])\n","plt.plot(data_lognormal[2])\n","plt.ylabel('Expected Value')\n","plt.xlabel('Iterations')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXkAAAEGCAYAAACAd+UpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAdlElEQVR4nO3deZwlZX3v8c+3zjm9zQwzAwwjInEG\nFwgxImQgIJEYFXclMago7l4Q44ImuQSyXJN7r0bvNb7Ea17Eics1uQQ3iFtQXKLg1SswLAKyRPZF\nlgaEmWGmu8859bt/1HN6zpzunjnT09XdU3zf8zqvqb1+T9XpX9V5quopRQRmZlZN2UIHYGZm5XGS\nNzOrMCd5M7MKc5I3M6swJ3kzswqrL3QA3fbdd99Ys2bNQodhZrbHuOKKKx6MiFUzjV9USX7NmjVs\n2LBhocMwM9tjSLpjR+NdXWNmVmFO8mZmFeYkb2ZWYU7yZmYV5iRvZlZhTvJmZhXmJG9mVmGVSPKX\n/Mcodz28ZaHDMDNbdBbVw1Cz9abPXoYEt/3tyxY6FDOzRaUSZ/IAfveJmdlUlUnyZmY2ValJXtL7\nJf1c0nWSzpM0VOb6zMxse6UleUkHAO8F1kXEM4AacFJZ6zMzs6nKrq6pA8OS6sAI8MuS12dmZl1K\nS/IRcQ/wUeBO4F7g0Yj4Tu90kk6VtEHShtHR0bLCMTN7XCqzumYlcAKwFngisETSG3qni4j1EbEu\nItatWjVju/dmZjYLZVbXvAC4LSJGI6IJXAA8u8T1mZlZjzKT/J3A0ZJGJAl4PnBDieszM7MeZdbJ\nXwp8BbgSuData31Z6zMzs6lKbdYgIj4AfKDMdZiZ2cz8xKuZWYU5yZuZVZiTvJlZhTnJm5lVmJO8\nmVmFOcmbmVWYk7yZWYU5yZuZVZiTvJlZhTnJm5lVmJO8mVmFOcmbmVWYk7yZWYU5yZuZVZiTvJlZ\nhTnJm5lVmJO8mVmFOcmbmVWYk7yZWYU5yZuZVZiTvJlZhTnJm5lVmJO8mVmFOcmbmVWYk7yZWYU5\nyZuZVZiTvJlZhTnJm5lVmJO8mVmFOcmbmVWYk7yZWYU5yZuZVZiTvJlZhTnJm5lVmJO8mVmFOcmb\nmVWYk7yZWYU5yZuZVVglkvxa3ctebF7oMMzMFp1Sk7ykFZK+IulGSTdIOqaM9fxg8E/4xsBflrFo\n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\nRsT/ZZ6qyn3h1cxsehV64tWXXs3MelUoyZuZWS8neTOzCnOSNzOrMCd5M7MKq0yS92VXM7OpKpPk\nzcxsKid5M7MKq0SS98NQZmbTq0SSB9fJm5lNpzJJ3szMpnKSNzOrMCd5M7MKq0SS94VXM7PpVSLJ\nm5nZ9JzkzcwqzEnezKzCnOTNzCqsEkk+BMiPQ5mZ9apEkgc/8WpmNp3KJHkzM5vKSd7MrMKc5M3M\nKqwSSd5PvJqZTa8SSd7MzKZXoSTv+2vMzHpVKMmbmVkvJ3kzswpzkjczq7DKJHn5Fhszsykqk+TN\nzGwqJ3kzswpzkjczq7BKJHlXx5uZTa8SSR78KJSZ2XQqk+TNzGwqJ3kzswqrRJIPV9aYmU2rEkne\nzMymV2qSl/RiSTdJulnSmWWuy8zMpiotyUuqAX8PvAQ4FHidpEPLWp+ZmU1V5pn8UcDNEXFrREwA\nXwBOKHF9ZmbWo8wkfwBwV1f/3WnYdiSdKmmDpA2jo6OzWtHhzb34teUHzy5KM7MKqy90ABGxHlgP\nsG7dulk9vLr+1J/MaUxmZlVR5pn8PcCBXf1PSsPMzGyelJnkLweeJmmtpAHgJODrJa7PzMx6lFZd\nExEtSe8GLgJqwGcj4udlrc/MzKYqtU4+Ii4ELixzHWZmNjM/8WpmVmFO8mZmFeYkb2ZWYU7yZmYV\npojF8/I8SaPAHbOcfV/gwTkMZ0/gMlff46284DLvqidHxKqZRi6qJL87JG2IiHULHcd8cpmr7/FW\nXnCZ55qra8zMKsxJ3syswqqU5NcvdAALwGWuvsdbecFlnlOVqZM3M7OpqnQmb2ZmPZzkzcwqbI9P\n8lV6WbikAyX9QNL1kn4u6fQ0fG9J35X0i/T/yjRckj6Ryn6NpCO6lvXmNP0vJL15ocrUD0k1SVdJ\n+mbqXyvp0lSuL6amqpE0mPpvTuPXdC3jrDT8JkkvWpiS9E/SCklfkXSjpBskHVPl/Szp/ek7fZ2k\n8yQNVXE/S/qspAckXdc1bM72q6TfknRtmucTkrTToCJij/1QNGF8C3AQMAD8DDh0oePajfLsDxyR\nupcB/0HxEvT/AZyZhp8JfCR1vxT4FiDgaODSNHxv4Nb0/8rUvXKhy7eDcv8x8C/AN1P/l4CTUvc/\nAO9M3X8E/EPqPgn4Yuo+NO37QWBt+k7UFrpcOynz54H/lLoHgBVV3c8Ur/28DRju2r9vqeJ+Bo4D\njgCu6xo2Z/sVuCxNqzTvS3Ya00JvlN3coMcAF3X1nwWctdBxzWH5vgYcD9wE7J+G7Q/clLo/Bbyu\na/qb0vjXAZ/qGr7ddIvpQ/HGsO8DzwO+mb68DwL13n1M8W6CY1J3PU2n3v3ePd1i/ADLU9JTz/BK\n7me2ve9577Tfvgm8qKr7GVjTk+TnZL+mcTd2Dd9uupk+e3p1TV8vC98TpZ+ohwOXAqsj4t406j5g\ndeqeqfx70nb5OHAGkKf+fYBHIqKV+rtjnyxXGv9omn5PKi8UZ6GjwOdSNdWnJS2hovs5Iu4BPgrc\nCdxLsd+uoPr7uWOu9usBqbt3+A7t6Um+kiQtBc4H3hcRG7vHRXEIr8R9r5JeDjwQEVcsdCzzrE7x\nk/6ciDgceIziZ/ykiu3nlcAJFAe3JwJLgBcvaFALZCH2656e5Cv3snBJDYoEf25EXJAG3y9p/zR+\nf+CBNHym8u8p2+VY4JWSbge+QFFlczawQlLnrWXdsU+WK41fDjzEnlPejruBuyPi0tT/FYqkX9X9\n/ALgtogYjYgmcAHFvq/6fu6Yq/16T+ruHb5De3qSr9TLwtOV8s8AN0TEx7pGfR3oXGF/M0VdfWf4\nm9JV+qOBR9PPwouAF0pamc6iXpiGLSoRcVZEPCki1lDsu3+PiJOBHwAnpsl6y9vZDiem6SMNPynd\nlbEWeBrFBapFKSLuA+6SdHAa9Hzgeiq6nymqaY6WNJK+453yVno/d5mT/ZrGbZR0dNqOb+pa1swW\n+iLFHFzkeCnFXSi3AH+x0PHsZll+h+Kn3DXA1enzUor6yO8DvwC+B+ydphfw96ns1wLrupb1NuDm\n9HnrQpetj7I/l2131xxE8cd7M/BlYDANH0r9N6fxB3XN/xdpO9xEH3ccLPQHeBawIe3rr1LcRVHZ\n/Qz8DXAjcB3wzxR3yFRuPwPnUVx3aFL8Ynv7XO5XYF3ahrcAn6Tn4v10HzdrYGZWYXt6dY2Zme2A\nk7yZWYU5yZuZVZiTvJlZhTnJm5lVmJO8VYakzen/NZJeP8fL/vOe/p/M5fLNyuIkb1W0BtilJN/1\n5OVMtkvyEfHsXYzJbEE4yVsVfRh4jqSrUzvmNUn/U9Llqd3udwBIeq6kH0n6OsUTmEj6qqQrUtvn\np6ZhHwaG0/LOTcM6vxqUln1dauf7tV3L/qG2tRl/bqftb0kfVvHOgGskfXTet449ruzs7MVsT3Qm\n8KcR8XKAlKwfjYgjJQ0CP5b0nTTtEcAzIuK21P+2iHhY0jBwuaTzI+JMSe+OiGdNs65XUTy9ehiw\nb5rnkjTucOA3gF8CPwaOlXQD8AfAIRERklbMeenNuvhM3h4PXkjRRsjVFE0370PR7gnAZV0JHuC9\nkn4G/JSikainsWO/A5wXEe2IuB+4GDiya9l3R0RO0UTFGopmc8eAz0h6FbBlt0tntgNO8vZ4IOA9\nEfGs9FkbEZ0z+ccmJ5KeS9Fi4jERcRhwFUU7KrM13tXdpnhBRgs4iqLlyZcD396N5ZvtlJO8VdEm\nitcndlwEvDM144ykp6eXdPRaDvwqIrZIOoTiNWsdzc78PX4EvDbV+6+ieP3bjC0jpncFLI+IC4H3\nU1TzmJXGdfJWRdcA7VTt8r8p2qhfA1yZLn6OAr8/zXzfBk5L9eY3UVTZdKwHrpF0ZRTNIXf8K8Wr\n635G0YLoGRFxXzpITGcZ8DVJQxS/MP54dkU0649boTQzqzBX15iZVZiTvJlZhTnJm5lVmJO8mVmF\nOcmbmVWYk7yZWYU5yZuZVdj/B4xItZX5jHs+AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"SzcuFwx383MU","colab_type":"code","outputId":"f46dbfe7-553b-4f48-c90e-f4234de1d718","executionInfo":{"status":"ok","timestamp":1584070453093,"user_tz":240,"elapsed":25495,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}},"colab":{"base_uri":"https://localhost:8080/","height":279}},"source":["data_arithmetic = Monte_Carlo_Arithmetic(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.3)\n","plt.plot(data_arithmetic[0])\n","plt.plot(data_arithmetic[1])\n","plt.plot(data_arithmetic[2])\n","plt.ylabel('Expected Value')\n","plt.xlabel('Iterations')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAY4AAAEGCAYAAABy53LJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAbX0lEQVR4nO3de5BeVZ3u8e9DAgSHRC5pY4ZWgpcZ\nBAejvqIMajJ4YyATIDhKCYKXAR08ZzhaEZJBzzhRCtF4DB6rnImIEtHxAsXg4F1ClHIGtEMu3E4g\ngJZJcNJeIqAzKOE5f+zV8tq83f3udHZfyPOp2tV7r7X2fn8rXZVfr733u5ZsExER0a29xjuAiIiY\nXJI4IiKiliSOiIioJYkjIiJqSeKIiIhapo53AGNh5syZnjNnzniHERExqaxdu/ZntnsGl+8RiWPO\nnDn09fWNdxgREZOKpB93Ks+tqoiIqCWJIyIiakniiIiIWpI4IiKiliSOiIioJYkjIiJqaTxxSJoi\naZ2k6zrUHSrpekkbJa2R1NtWt1PS+rJ9pa38MEk3S9os6YuS9mm6DxER8ZixGHGcB9w5RN1yYJXt\no4BlwMVtdf9le27ZFraVXwJ81PazgF8Cb20i6IiI6KzRxFFGECcClw3R5Ahgddm/AThphOsJOA64\nqhRdAZw8+kgjIqJbTY84VgDnA48OUb8BWFT2TwGmSzq4HE+T1CfpJkkDyeFgYIftR8rxFuCQTheW\ndE45v6+/v3/UHYmIiEpjiUPSAmC77bXDNFsMzJO0DpgHbAV2lrpDbbeANwArJD2zzufbXmm7ZbvV\n0/O4qVYiImIXNTlX1bHAQkknANOAGZKutH3GQAPb2ygjDkn7A6fa3lHqtpaf90paAzwfuBo4QNLU\nMuropUo2ERExRhobcdhearvX9hzgNGB1e9IAkDRT0kAMS4HLS/mBkvYdaEOVhO5wtUD6DcBryzln\nAdc21YeIiHi8Mf8eh6RlkgbekpoPbJJ0FzALuKiUPwfok7SBKlF80PYdpe4C4F2SNlM98/jUmAUf\nERGo+iP+ia3VajnTqkdE1CNpbXnW/AfyzfGIiKgliSMiImpJ4oiIiFqSOCIiopYkjoiIqCWJIyIi\nakniiIiIWpI4IiKiliSOiIioJYkjIiJqSeKIiIhakjgiIqKWJI6IiKgliSMiImpJ4oiIiFqSOCIi\n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\nETGpSFpruzW4PN8cj4iIWpI4IiKiliSOiIioJYkjIiJqSeKIiIhakjgiIqKWJI6IiKgliSMiImpJ\n4oiIiFqSOCIiopYkjoiIqCWJIyIiakniiIiIWpI4IiKiliSOiIioJYkjIiJqSeKIiIhakjgiIqKW\nJI6IiKgliSMiImqR7fGOoXGS+oEfj3ccNc0EfjbeQYyx9HnPkD5PHofa7hlcuEckjslIUp/t1njH\nMZbS5z1D+jz55VZVRETUksQRERG1JHFMXCvHO4BxkD7vGdLnSS7POCIiopaMOCIiopYkjoiIqCWJ\nYxxJOkjStyXdXX4eOES7s0qbuyWd1aH+K5Juaz7i0RtNnyU9SdJXJf0/SbdL+uDYRl+PpOMlbZK0\nWdKSDvX7Svpiqb9Z0py2uqWlfJOk14xl3KOxq32W9CpJayXdWn4eN9ax76rR/J5L/dMlPSRp8VjF\nPGq2s43TBnwIWFL2lwCXdGhzEHBv+Xlg2T+wrX4R8HngtvHuT9N9Bp4E/EVpsw9wI/CX492nIfo5\nBbgHeEaJdQNwxKA25wL/VPZPA75Y9o8o7fcFDivXmTLefWq4z88H/rjsPxfYOt79abrPbfVXAV8G\nFo93f7rdMuIYXycBV5T9K4CTO7R5DfBt27+w/Uvg28DxAJL2B94FfGAMYt1ddrnPtn9j+wYA278F\nbgF6xyDmXXE0sNn2vSXWL1D1vV37v8VVwCskqZR/wfbDtu8DNpfrTXS73Gfb62xvK+W3A/tJ2ndM\noh6d0fyekXQycB9VnyeNJI7xNcv2/WX/p8CsDm0OAX7SdryllAG8H/gI8JvGItz9RttnACQdAPwV\ncH0TQe4GI/ahvY3tR4BfAQd3ee5ENJo+tzsVuMX2ww3FuTvtcp/LH34XAP84BnHuVlPHO4AnOknf\nAZ7aoerC9gPbltT1u9GS5gLPtP3OwfdMx1tTfW67/lTgX4CP2b5316KMiUjSkcAlwKvHO5Yx8D7g\no7YfKgOQSSOJo2G2XzlUnaT/lDTb9v2SZgPbOzTbCsxvO+4F1gDHAC1JP6L6PT5F0hrb8xlnDfZ5\nwErgbtsrdkO4TdkKPK3tuLeUdWqzpSTDJwM/7/LciWg0fUZSL3ANcKbte5oPd7cYTZ9fDLxW0oeA\nA4BHJf237Y83H/YojfdDlj15Az7MHz4o/lCHNgdR3QM9sGz3AQcNajOHyfNwfFR9pnqeczWw13j3\nZYR+TqV6qH8Yjz00PXJQm3fwhw9Nv1T2j+QPH47fy+R4OD6aPh9Q2i8a736MVZ8HtXkfk+jh+LgH\nsCdvVPd2rwfuBr7T9p9jC7isrd1bqB6Qbgbe3OE6kylx7HKfqf6aM3AnsL5sfzPefRqmrycAd1G9\ndXNhKVsGLCz706jeptkM/AB4Rtu5F5bzNjFB3xzbnX0G3gP8uu33uh54ynj3p+nfc9s1JlXiyJQj\nERFRS96qioiIWpI4IiKiliSOiIioJYkjIiJqSeKIiIhakjgiRiDpofJzjqQ37OZr//2g43/fndeP\naEISR0T35gC1Ekf5pvBw/iBx2P7zmjFFjLkkjojufRB4maT1kt4paYqkD0v6oaSNkt4GIGm+pBsl\nfQW4o5T9a1ln4nZJ55SyD1LNArte0udK2cDoRuXat5U1Kl7fdu01kq4q65J8rm2m1Q9KuqPEsnzM\n/3Vij5G5qiK6t4Tq270LAEoC+JXtF5UpwL8v6Vul7QuA57qaFh3gLbZ/IWk/4IeSrra9RNL/sD23\nw2ctAuYCzwNmlnO+V+qeTzUtyTbg+8Cxku4ETgEOt+0ye3BEIzLiiNh1rwbOlLQeuJlqOpVnl7of\ntCUNgL+TtAG4iWrCu2czvJcC/2J7p+3/BL4LvKjt2ltsP0o1Ncccqqm6/xv4lKRFTK6p9mOSSeKI\n2HUC/qftuWU7zPbAiOPXv28kzQdeCRxj+3nAOqr5i3ZV+zoVO4GprtZ5OJpqoaAFwDdGcf2IYSVx\nRHTvQWB62/E3gb+VtDeApD+R9Ecdznsy8Evbv5F0OPCStrrfDZw/yI3A68tzlB7g5VQT5HVUFgV6\nsu2vAe+kusUV0Yg844jo3kZgZ7nl9BngUqrbRLeUB9T9dF4K9xvA28tziE1Ut6sGrAQ2SrrF9ult\n5ddQrbmygWpG4PNt/7Qknk6mA9dKmkY1EnrXrnUxYmSZHTciImrJraqIiKgliSMiImpJ4oiIiFqS\nOCIiopYkjoiIqCWJIyIiakniiIiIWv4/XtACujUBYo4AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"QzNfyUQJ84aq","colab_type":"code","outputId":"5714df33-c971-4098-fa9f-a13b335aeaeb","executionInfo":{"status":"ok","timestamp":1584070598589,"user_tz":240,"elapsed":36732,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"","userId":"09079511126649814689"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Monte_Carlo_diff(iterations = 1000000, K = 110, T = 1, r = 0.1,N = 150, S0=100, sigma = 0.2)\n","#plt.plot(data_diff[0])\n","#plt.plot(data_diff[1])\n","#plt.plot(data_diff[2])\n","#plt.ylabel('Expected Value')\n","#plt.xlabel('Iterations')\n","#plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.00173159431624881\n"],"name":"stdout"}]}]}